#!/bin/bash
set -euo pipefail

# Needed for anything that connects to pulseaudio.
export XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR:-/run/user/"$UID"}

# Needed for anything dealing with xorg. Normally it'll be set by whatever
# starts the X server and thus available in any GUI subprocess like GUI
# terminal emulators, but if this scirpt is invoked via cron, it'll need to set
# DISPLAY itself.
export DISPLAY=${DISPLAY:-:0}

msg_dir=~/status_msg

once() {
    local msg=""
    local date
    date=$(date '+%Y-%m-%d %H:%M %a')

    local mixer
    case "$HOSTNAME" in
    jair) mixer=$(amixer get Master);;
    *) mixer=$(amixer -D pulse get Master);;
    esac

    [[ "$mixer" =~ [0-9]{1,3}% ]]
    vol="${BASH_REMATCH%\%}"
    [[ "$mixer" = *"[off]"* ]] && vol+=m

    acpi=$(acpi -b | grep -v 'rate information unavailable')
    [[ "$acpi" =~ [0-9]{1,3}% ]]
    pct_charge=${BASH_REMATCH%\%}
    ((pct_charge < 30)) && {
        [[ "$acpi" = *Charging* ]] && msg+=" | BATTERY LOW" || msg+=" | BATTERY DISCHARGING"
    }
    [[ $pct_charge -lt 20 && "$acpi" != *Charging* ]] && ding

    new_msgs=$(find ~/mail/{cronic,new} -type f | wc -l)
    [[ "$new_msgs" -gt 0 ]] && msg+=" | $new_msgs new msgs"

    loadavg=$(awk '{if ($1 > 2) {print $1}}' /proc/loadavg)
    [[ -n "$loadavg" ]] && msg+=" | loadavg=$loadavg"

    mem_avail_pct=$(free | awk '
        /^Mem:/ {
            total = $2
            avail = $7
            pct = avail / total * 100
            if (pct < 30){
                printf "%.0f", pct
            }
        }'
    )
    [[ -n "$mem_avail_pct" ]] && msg+=" | mem_avail_pct=$mem_avail_pct"

    if [[ -e ~/.last_workout ]] && (($(date +%s) - "$(stat --printf=%Y ~/.last_workout)" > 90*60)); then
        msg+=" | WORKOUT"
    fi

    if [[ -e "$msg_dir" ]]; then
        for f in "$msg_dir"/*; do
            [[ -e "$f" ]] || continue
            msg+=" | ${f##*/}"
        done
    fi

    xsetroot -name "$date | v$vol | b$pct_charge ${msg# }"
}

cont() {
    while true; do
        once |& logger -t statusbar -p DEBUG
        sleep 10
    done
}

todo() {
    OPTIND=0
    local sound=
    while getopts "hs" opt; do
        case "$opt" in
        h) echo "$usage"; exit 0;;
        s) sound=yes;;
        *) exit 1;;
        esac
    done
    shift $((OPTIND-1))
    local msg=${1:?No msg given}
    touch "$msg_dir/$msg"
    once
    if [[ "$sound" ]]; then
        paplay ~/dotfiles/sounds/xylofon.wav &
    fi
}

did() {
    local msg=${1:?No msg given}
    rm "$msg_dir/$msg"
    once
}

help() {
    echo "$usage"
}

# bash tab completion.
# Recommended completion spec: complete -C statusbar statusbar sb
bash_tab_completion() {
    local cmd=$1; shift
    local cword=$1; shift
    local prev_word=$1; shift

    if [[ "$prev_word" == "$cmd" ]]; then
        compgen -W "$(declare -F | awk '{print $(NF)}')" -X bash_tab_completion "$cword"
    elif [[ "$prev_word" == did ]]; then
        compgen -W "$(for f in "$msg_dir"/*; do [[ -e "$f" ]] || continue; echo "${f##*/}"; done)" "$cword"
    fi
}

if [[ $# -eq 3 && -v COMP_TYPE ]]; then
    bash_tab_completion "$@"
    exit 0
fi

usage="\
usage: statusbar <cmd>

help
    Show help
once
    update statusbar once
cont
    update statusbar continuously
todo [-s] <msg>
    add a short message to display in the statusbar. 
    -s
        play a sound. The sound can be useful when this command is invoked via
        cron or at.
did <msg>
    clear message from the statusbar"


while getopts "h" opt; do
    case "$opt" in
    h) echo "$usage"; exit 0;;
    *) exit 1;;
    esac
done
shift $((OPTIND-1))

(($# > 0)) || {
    echo "$usage" >&2
    exit 1
}

"$@"

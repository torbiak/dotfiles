[[ "$-" == *i* ]] || return

export CLICOLOR=1
export EDITOR=vim
export VISUAL=vim
export HISTFILESIZE=100000
export HISTSIZE=$HISTFILESIZE
export HISTIGNORE="&:[ ]*:exit:l:ll:ls:histdel"
export LC_ALL="en_US.UTF-8"
export LESS="-# 60 -i -X -R"
export LSCOLORS=dxfxcxdxbxegedabagacad
export LS_COLORS='di=1;35:ln=35:ex=31:su=30;43:sg=30;43:tw=30;43:ow=30;43:'
export PAGER=less
export PYTHONSTARTUP=$HOME/.pythonrc
export PYTHONPATH=.:$HOME/code/python
export GOPATH=$HOME/code/go
export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"
HISTTIMEFORMAT='%Y-%m-%dT%H:%M:%S '

case $OSTYPE in
    linux-gnu | cygwin) alias ls='ls --color=auto';;
esac
alias l='ls -F'
alias ll='ls -l'
alias j='jobs'
alias ocaml='ledit -x -h ~/.ocaml_history ocaml'
alias irssi='TERM=screen-256color irssi'
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'

shopt -s histappend checkwinsize cmdhist extglob failglob
if [[ ${BASH_VERSINFO[0]} -ge 4 ]]; then
    shopt -s globstar
fi
set -o histexpand

bind C-p:history-search-backward
bind C-n:history-search-forward
bind '"\ev": redraw-current-line'
bind '"\em": menu-complete'
bind '"\ex": shell-kill-word'
bind '"\ez": shell-backward-kill-word'
bind '"\ee": edit-and-execute-command'
bind '"\eh": shell-backward-word'
bind '"\el": shell-forward-word'
bind 'set revert-all-at-newline on'  # Disable persistent history changes.
bind 'set completion-ignore-case on'
bind 'set bell-style none'
bind 'set show-all-if-ambiguous on'
bind 'set enable-bracketed-paste on'
bind 'set colored-stats on'


stty -ixon -ixoff  # Try to disable flow control

# increase max file descriptors so file-watching APIs don't run out of them.
case $OSTYPE in
    cygwin|msys|mingw) :;;
    *) ulimit -S -n 4096;;
esac


## Prompt
trap 'last_invocation=$SECONDS' DEBUG # Save the time of the last command invocation.

prompt1() {
    local r="\[\e[31m\]" # red
    local g="\[\e[32m\]" # green
    local y="\[\e[33m\]" # yellow
    local p="\[\e[34m\]" # purple
    local reset="\[\e[0m\]"
    local sep="$y|"
    local status_cmd="\$(s=\$?; [[ \$s -ne 0 ]] && echo \"$r\$s$sep\")"
    local dur_cmd="\$([[ \$SECONDS -gt 2 ]] && echo \"$g\$(sec2hms \$((SECONDS-last_invocation)))$sep\")"
    local job_cmd="\$([[ \j -ne 0 ]] && echo \"$p\j$sep\")"
    local branch_cmd="\$(b=\$(gitBranch); [[ -n \"\$b\" ]] && echo \"$sep$g\$b\")"
    PS1="\[\a\]${status_cmd}${dur_cmd}${job_cmd}$g\w${branch_cmd}$y\\\$$reset "
}
prompt1

prompt1_cheap() {
    local r="\[\e[31m\]" # red
    local g="\[\e[32m\]" # green
    local y="\[\e[33m\]" # yellow
    local p="\[\e[34m\]" # purple
    local reset="\[\e[0m\]"
    local sep="$y|"
    local status_cmd="\$(s=\$?; [[ \$s -ne 0 ]] && echo \"$r\$s$sep\")"
    local dur_cmd="\$([[ \$SECONDS -gt 2 ]] && echo \"$g\$(sec2hms \${SECONDS})$sep\")"
    local job_cmd="\$([[ \j -ne 0 ]] && echo \"$p\j$sep\")"
    PS1="\[\a\]${status_cmd}${dur_cmd}${job_cmd}$g\w$y\\\$$reset "
}

sec2hms() {
    local secs=${1:?No seconds given}
    local h m s
    let 'h = secs / 3600'
    let 'm = (secs % 3600) / 60'
    let 's = secs % 60'
    [[ $h -gt 0 ]] && printf ${h}h
    [[ $m -gt 0 ]] && printf ${m}m
    printf ${s}s
}

# cd to a directory further up your path that contains the given pattern.
# Change to the parent directory if nothing given.
# eg, if pwd is /usr/local/bin, then running "up loc" will cd to /usr/local.
up() {
    if [[ $# -eq 0 ]]; then
        cd ..
        return
    fi
    [[ "$PWD" =~ .*$1[^/]*/ ]] || return 1
    cd "${BASH_REMATCH[0]}"
}

# Create a new tmux window with the same working directory as the current shell.
# I prefer to think of splitting vertically as using a vertical splitter, as in
# vim and most other tools, not as splitting the vertical space as in tmux, so
# override the tmux terminology.
tmux-split() {
    tmux split-window -v -c "$PWD"
}
alias ts=tmux-split
tmux-vsplit() {
    tmux split-window -h -c "$PWD"
}
alias tv=tmux-vsplit

# Delete last command from history: histdel
# Delete from offset to end of history: histdel OFFSET
# Delete from offset to another offset: histdel OFFSET OFFSET
histdel() {
    local last=$(history | tail -n 1 | awk '{print $1}')
    local start=${1:-$last}
    local end=${2:-$((last+1))}
    while [[ $start -lt $end ]]; do
        history -d $start
        end=$((end-1))
    done
}

normal-perms() {
    [[ $# -gt 0 ]] || set .
    find "$@" -type d -exec chmod 755 '{}' \; -o -type f -exec chmod 644 '{}' \;
}

# find files under current directory containing a pattern
ff() {
    pattern=${1:?No pattern given}; shift
    find . -iname "*${pattern}*" "$@" 2>/dev/null
}

# find files ending with a suffix
suf() {
    pattern=${1:?No pattern given}; shift
    find . -iname "*${pattern}" "$@" 2>/dev/null
}


gitBranch() {
    branch_name=$(git symbolic-ref -q HEAD 2>/dev/null || true)
    branch_name=${branch_name##refs/heads/}
    echo $branch_name
}

gitTrackingBranch() {
    git rev-parse --symbolic-full-name --abbrev-ref @{upstream}
}

# git add rebase continue
garc() {
    git add -u
    git rebase --continue
}

# git submodule update
gsu() {
    repoRoot=$(git rev-parse --show-toplevel)
    # execute in a subshell so we don't have to save the cwd
    (cd $repoRoot; git submodule update)
}

most() {
    local usage='most [<options>] [<file>...]

options:
-h          show help
-n <range>  print a range of files (default: 1) (eg: 1,3)
-m          sort by mtime (the default)
-a          sort by atime
-c          sort by ctime
-s          sort by size
-r          reverse order (thus, "least")
-d          filter out non-directory files'


    local OPTIND=0
    local ls_opts=()
    local nsorts=0
    local n=1
    local only_dirs=0
    local IFS=$'\t\n'  # Needed for the only_dirs filtering.
    while getopts ":hn:amcsrd" opt; do
        case "$opt" in
        h) echo "$usage"; exit 0;;
        a) ls_opts+=(-u); let ++nsorts;;
        m) let ++nsorts;;
        c) ls_opts+=(-c); let ++nsorts;;
        s) ls_opts+=(-S); let ++nsorts;;
        r) ls_opts+=(-r); let ++nsorts;;
        d) only_dirs=1;;
        n) n=$OPTARG;;
        *) echo "unexpected option: $opt" >&2; return 1;;
        esac
    done
    [[ "$nsorts" -gt 1 ]] && {
        echo "multiple sorts given" >&2
        return 1
    }
    shift $((OPTIND-1))
    [[ $# -eq 0 ]] && set *
    [[ "$only_dirs" -ne 0 ]] && {
        set $(for f in "$@"; do [[ -d "$f" ]] && echo "$f"; done)
    }
    ls -dt "${ls_opts[@]}" "$@" | sed -n -e "${n}p"
}

cdmost() {
    cd "$(most -d "$@")"
}


# screen attach
sat() {
    local hostname=${1:-localhost}
    if [[ "$hostname" == localhost ]]; then
        screen -xRR
    else
        ssh -t $hostname screen -xRR
    fi
}

# Generate a script to rename/remove a bunch of files.
#
# Edit a list of destinations in an editor, then review the generated script
# before running it. Leave a blank line to remove a file. Don't delete any
# lines, since files are indexed by position.
#
# vidir from moreutils is an alternative to this. qmv from renameutils is less
# appealing due to its "<file><tab><file>" output. I use this quite frequently,
# though, so it's nice to keep edmv around for systems where vidir isn't easily
# available.
edmv() {
    [[ $# -eq 0 ]] && return 0
    local src=$(mktemp --tmpdir edmvsrc.XXXXXXX)
    local dst=$(mktemp --tmpdir edmvdst.XXXXXXX)
    local script=$(mktemp --tmpdir edmvscript.XXXXXXX)
    echo "set -eu" >"$script"
    for f in "$@"; do echo "$f"; done > "$src"
    cp "$src" "$dst"
    "$EDITOR" "$dst"
    if [[ $(wc -l <"$src") -ne $(wc -l <"$dst") ]]; then
        printf "Line count mismatch between %s and %s\n" "$src" "$dst" 1>&2
        rm "$script"
        return 1;
    fi
    local esc=(sed -e 's/[\$\`\"\\]/\\&/g;')
    while true; do
        read -r a <&3 || break
        read -r b <&4 || break
        if [[ "$b" == "" ]]; then
            printf 'rm "%s"\n' $(echo "$a" | "${esc[@]}")
        elif [[ "$a" != "$b" ]]; then
            local simple='^[a-zA-Z_0-9.]*$'
            if [[ "$a" =~ $simple && "$b" =~ $simple ]]; then
                echo "mv $a $b"
            else
                printf 'mv "%s" "%s"\n' $(echo "$a" | "${esc[@]}") $(echo "$b" | "${esc[@]}")
            fi
        fi
    done 3<"$src" 4<"$dst" >>"$script"
    rm "$src" "$dst"
    "$EDITOR" "$script"
    if "$BASH" "$script"; then
        rm "$script"
    else
        echo "$script exited with $?" >&2
    fi
}

# note commit push
ncp() {
    git commit -am "update from $(hostname)" && git push
}

timer() {
    local dur=${1:?No duration given}
    local start=$(date +%s)
    local left=$dur
    while (( left > 0 )); do
        printf "\r%4d" $left
        sleep 1
        left=$((start + dur - $(date +%s)))
    done
    case $(uname) in
        Linux) aplay /usr/share/pommed/goutte.wav &>/dev/null;;
        CYGWIN*) cat "$(cygpath -W)/Media/chord.wav" > /dev/dsp;;
    esac
    # clear line and then echo bell to set urgent flag in window manager
    echo -en '\r\e[2K\a'
}

# Open in BackGround
obg() {
    nohup "$@" &> /dev/null & disown $!
}

sleeptil() {
    local t=${1:?No time given}
    # date supports suprisingly flexible relative and absolute time strings,
    # like +3hour, 'tomorrow 03:00', 2012-09-24T20:02:00, etc.
    next=$(date -d "$t" +%s)
    now=$(date +%s)
    [[ "$next" -le "$now" ]] && return 0
    sleep $((next - now))
}

# Expand stdin as if it were a heredoc. That is, parameter, command, and
# arithmetic expansions are performed by the shell. Also, a backslash must be
# used to escape any \, $, or ` characters.
heredoc() {
    . <(sed -e '1i cat <<__heredoc_delimiter__' -e '$a __heredoc_delimiter__')
}

# rg into less, with colors and headings
# Seeing matches grouped by file is nice sometimes.
rgl() {
    rg --color always --heading "$@" | less
}

[ -e $HOME/.bash_completion ] && . $HOME/.bash_completion

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
export FZF_DEFAULT_OPTS=-m

[ -e $HOME/.bashrc.local ] && . $HOME/.bashrc.local
true

from pathlib import Path
import ctypes
import os
import readline
import rlcompleter
import sys
import warnings

import __main__

class Completer(rlcompleter.Completer):
    """ A readline completer for quoted filenames and python namespaces.

    Provides the same completions as the default completer, and enables
    readline's filename completion inside single or double quotes.
    """

    def __init__(self):
        super().__init__(__main__.__dict__)

        # Access some readline vars that the python interface doesn't provide.
        libreadline = ctypes.CDLL(readline.__file__)
        self.rl_attempted_completion_over = ctypes.c_int.in_dll(libreadline, "rl_attempted_completion_over")

        # Need to remove slash (`/`) and tilde from delims so filename
        # completion can work. There's some tension between allowing more
        # characters in filenames versus not breaking up python tokens
        # appropriately.
        readline.set_completer_delims(' \t\n`!@#$%^&*()=+[{]}\\|;:\'",<>?')

    def find_matches(self, text: str) -> list[str]:
        line = readline.get_line_buffer()
        begidx = readline.get_begidx()
        cursor_pos = begidx + len(text)

        # escapes: save cursor, cursor to top-left corner, clear line, restore cursor
        #print(f'\033[s\033[H\033[2K{text=},{line=},{cursor_pos=},{begidx=}\n\033[u', end='')

        with warnings.catch_warnings():
            warnings.simplefilter(action='ignore')
            if begidx > 0 and line[begidx-1] in '\'"':
                # Do filename completion if the char before the text to be
                # completed is a quote.

                # Normally readline falls back to filename completion if there are
                # no other matches, but python's readline bindings disable that by
                # setting rl_attempted_completion_over=1 before calling the
                # registered completer function (see cpython/Modules/readline.c).
                self.rl_attempted_completion_over.value = 0
                return []
            elif "." in text:
                return self.attr_matches(text)
            else:
                return self.global_matches(text)

    def complete(self, text: str, state: int) -> str:
        if state == 0:
            try:
                self.matches = self.find_matches(text)
            except Exception as e:
                print('\n' + e)
        try:
            return self.matches[state]
        except IndexError:
            return None

terminal_colors = {
    'black': '\001\033[30m\002',
    'red': '\001\033[31m\002',
    'green': '\001\033[32m\002',
    'yellow': '\001\033[33m\002',
    'blue': '\001\033[34m\002',
    'magenta': '\001\033[35m\002',
    'cyan': '\001\033[36m\002',
    'white': '\001\033[37m\002',
    'reset' : '\001\033[0m\002',
}

def static_prompt(msg: str) -> str:
    green = terminal_colors['green']
    yellow = terminal_colors['yellow']
    reset = terminal_colors['reset']
    bell = '\001\a\002'
    return f'{bell}{yellow}{msg}{green}>>>{reset} '

class WorkingDirPrompt:
    """ A prompt-generator that shows part of the working dir path.

    To use, assign an instance to sys.ps1:

        >>> sys.ps1 = WorkingDirPrompt(1)
    """
    def __init__(self, path_components: int) -> None:
        self.path_components = path_components

    def __str__(self) -> str:
        green = terminal_colors['green']
        yellow = terminal_colors['yellow']
        reset = terminal_colors['reset']
        bell = '\001\a\002'

        wd = '/'.join(Path.cwd().parts[-self.path_components:])
        return f'{bell}{yellow}{wd}{green}>>>{reset} '

def init_repl():
    import atexit
    import readline
    # python3.4+ does this by default, and ipython stores history in sqlite.
    # See https://docs.python.org/3/library/site.html#rlcompleter-config
    if sys.version_info < (3, 4) and 'get_ipython' not in globals():
        history = os.path.expanduser('~/.python_history')
        if os.path.exists(history):
            readline.read_history_file(history)
        readline.parse_and_bind('tab: complete')
        atexit.register(readline.write_history_file, history)

    readline.set_completer(Completer().complete)

    green = '\001\033[32m\002'
    red = '\001\033[31m\002'
    reset = '\001\033[0m\002'
    bell = '\001\a\002'
    sys.ps1 = '%s%s>>>%s ' % (bell, green, reset)
init_repl()

def history(max_lines=-1):
    """ View readline history in less. """
    total = readline.get_current_history_length()
    if max_lines == -1:
        # default value prints everything
        max_lines = total
    lines = []
    if max_lines > 0:
        for i in range(total - max_lines, total):
            lines.append(readline.get_history_item(i + 1))
    if lines:
        less('\n'.join(lines), ['+G'])

def ezbench(func, n=None):
    import timeit
    timer = timeit.Timer(func)
    if n is None:
        n, _ = timer.autorange()
    elapsed = timer.timeit(n)
    return dict(iterations=n, elapsed=elapsed)

def xf(filepath, main=False):
    """ eXecute File in the global scope. Be careful.

    If main is False, then change __name__ so that blocks guarded by
    `if __name__ == '__main__'` aren't executed.

    """
    try:
        if not main:
            saved_name = __name__
            globals()['__name__'] = 'xf'
        with open(os.path.expanduser(filepath)) as f:
            exec(f.read(), globals(), globals())
    finally:
        if not main:
            globals()['__name__'] = saved_name


def fa(obj, pattern):
    """ Filter Attributes. """
    import fnmatch
    return fnmatch.filter(dir(obj), pattern)

def import_charting():
    import numpy
    import matplotlib.pyplot
    import matplotlib
    try:
        import jat.pandas_lt as pandas
    except:
        import pandas
    globals().update(np=numpy, mpl=matplotlib, plt=matplotlib.pyplot, pd=pandas)

def less(stdin, args=None):
    import subprocess

    if isinstance(args, str):
        raise ValueError('args should be an iterable of str, not a str')

    tostr = getattr(stdin, 'to_string', None)
    if tostr:
        stdin_bytes = tostr().encode()
    elif isinstance(stdin, bytes):
        stdin_bytes = stdin
    else:
        stdin_bytes = str(stdin).encode()

    cmdline = ['less']
    if args is not None:
        cmdline.extend(args)

    subprocess.run(cmdline, input=stdin_bytes)

def clip(arg):
    import subprocess
    if type(arg) not in (str, bytes):
        arg = str(arg)
    if type(arg) == str:
        arg = arg.encode()
    subprocess.run(['xsel', '-bi'], input=arg)

def freshen_prefix(prefix):
    import importlib
    mods = {m for m in sys.modules if m.startswith(prefix)}
    # Delete all the modules first so that on reimport they can't grab an old
    # version of one of their friends.
    for m in mods:
        del sys.modules[m]
    for m in mods:
        importlib.import_module(m)


import json

class Encoder(json.JSONEncoder):
    def default(self, obj):
        """ Return a serializable object derived from obj. """
        try:
            return obj.__dict__
        except AttributeError:
            return repr(obj)

def pp(obj):
    """ Pretty-print a Python object to stdout. """
    print(pf(obj))


def pf(obj):
    """ Pretty-print a Python object as a string.

    I much prefer how the json package formats things compared to pprint.
    """
    return json.dumps(obj, indent=4, cls=Encoder)

def pless(obj):
    less(pf(obj))

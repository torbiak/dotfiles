import atexit
import os
import re
import readline
import rlcompleter
import socket
import _socket
import sys
import time

if sys.version_info < (3,):
    history = os.path.expanduser('~/.python_history')
    if os.path.exists(history):
        readline.read_history_file(history)
    readline.parse_and_bind('tab: complete')
    atexit.register(readline.write_history_file, history)


def t(*args):
    import timeit
    return timeit.Timer(*args).timeit()

def xf(filepath, main=False):
    """ eXecute File in the global scope. Be careful.

    If main is False, then change __name__ by so that blocks gaurded by `if
    __name__ == '__main__'` aren't executed.

    """
    try:
        if not main:
            saved_name = __name__
            globals()['__name__'] = 'xf'
        with open(os.path.expanduser(filepath)) as f:
            exec(f.read(), globals(), globals())
    finally:
        if not main:
            globals()['__name__'] = saved_name


def fa(obj, pattern):
    """ Filter Attributes. """
    import fnmatch
    return fnmatch.filter(dir(obj), pattern)

def import_charting():
    import numpy
    import matplotlib.pyplot
    import pandas
    import seaborn
    globals().update(dict(np=numpy, plt=matplotlib.pyplot, pd=pandas, sns=seaborn))
    pd.plotting.register_matplotlib_converters()

def less(arg):
    import subprocess

    tostr = getattr(arg, 'to_string', None)
    if tostr:
        arg = tostr()

    if type(arg) not in (str, bytes):
        arg = str(arg)

    if type(arg) == str:
        arg = arg.encode()

    subprocess.run(['less'], input=arg)

def clip(arg):
    import subprocess
    if type(arg) not in (str, bytes):
        arg = str(arg)
    if type(arg) == str:
        arg = arg.encode()
    subprocess.run(['xsel', '-bi'], input=arg)

def freshen_prefix(prefix):
    import importlib
    mods = {m for m in sys.modules if m.startswith(prefix)}
    # Delete all the modules first so that on reimport they can't grab an old
    # version of one of their friends.
    for m in mods:
        del sys.modules[m]
    for m in mods:
        importlib.import_module(m)

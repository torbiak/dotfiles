" setup runtimepath to be more unixy on windows
set rtp-=~/vimfiles
set rtp+=~/.vim

let g:pathogen_disabled = ['vipyut']
call pathogen#infect()
call pathogen#helptags()

" Basics
" ======
filetype plugin on
set encoding=utf-8
set tags+=.tags
set laststatus=2 ruler
set sts=4 ts=8 sw=4 et
set ic hls smartcase incsearch
set showmatch matchtime=2  " paren-matching
set wim=list:longest
set grepprg=ag\ --vimgrep
set bs=2
set complete=.,w  " stay fast by only suggesting completions from open windows
set winminheight=0
set modeline
set more
set backup
set shellslash
" Make sure ~/tmp/vim exists.
set backupdir=~/tmp/vim,.
ino jk <esc>
let mapleader = 's'
set vb t_vb=
nn <leader> <nop>
nn Y y$

" Display
syntax enable
set guioptions='cM'
set t_Co=16
set background=dark
let g:solarized_italic=0
colorscheme pablo
set list
set listchars=tab:Â»\ ,trail:\ ,

" Emacs emulation in Cmdline mode.
cnoremap <C-S> <C-D>
cnoremap <C-A> <Home>
cnoremap <C-B> <Left>
cnoremap <C-D> <Del>
cnoremap <C-E> <End>
cnoremap <C-F> <Right>
cnoremap <C-N> <Down>
cnoremap <C-P> <Up>

" Forward/Back in insert mode
inoremap <C-B> <Left>
inoremap <C-F> <Right>

" Quickfix
" The default bindings for -, _, and + are stupid.
nn - :cp<cr>
nn + :cn<cr>

" Arglist
nn <leader>n :wn<cr>
nn <leader>N :N<cr>

" vimrc
nn <leader>ve :e ~/.vimrc<cr>
nn <leader>vn :new ~/.vimrc<cr>
nn <leader>vs :source ~/.vimrc<cr>

" Windowing
" I often have a lot of windows open in two columns and want to navigate
" through a bunch of them quickly.
nn <c-j> <c-w>j
nn <c-k> <c-w>k

" Various conveniences
nn <leader>p :set paste!<cr>
nn <leader>h :noh<cr>
nn <leader>g :grep <cword><cr>
nn <c-w>g :grep! <cword><cr>:new<cr>:cc 1<cr>
" remove trailing whitespace
nn <leader>mw :%s/\v\s+$//<cr>
nn <leader>ms :w<cr>:source %<cr>
nn <leader>mm :Make<cr>
nn <leader>x :source ~/source.vim<cr>
nn <leader>8 :set sts=8 ts=8 sw=8 et<cr>
nn <leader>4 :set sts=4 ts=4 sw=4 et<cr>
nn <leader>2 :set sts=2 ts=2 sw=2 et<cr>
nn <leader>y :let @y = @"<cr>

" Formatting
" remove comment markers when joining lines
set formatoptions+=j
" Don't insert two spaces after sentences when joining lines.
set nojoinspaces


" Filetypes
" =========

" The standard markdown plugin is lacking as of Vim7.4
" Improvements in tpope/vim-markdown will eventually be merged upstream.
function! MarkdownLevel()
    let h = matchstr(getline(v:lnum), '^#\+')
    if empty(h)
        return "="
    else
        return ">" . len(h)
    endif
endfunction
" md extension signifies markdown, not modula2
au! filetypedetect BufNewFile,BufRead *.md
au filetypedetect BufNewFile,BufRead *.md setlocal filetype=markdown
au FileType markdown setlocal foldexpr=MarkdownLevel()
au FileType markdown setlocal foldmethod=expr
" Don't close folds when the filetype is detected.
au FileType markdown setlocal foldlevel=10

" gp extension is for gnuplot instead of the PARI/GP calculator.
au! filetypedetect BufNewFile,BufRead *.gp
au filetypedetect BufNewFile,BufRead *.gp setlocal filetype=gnuplot

" Indenting
" =========
" One indenting expression to rule them all.
"
" Cover common cases but let the user take care of anything weird, since
" trying to be comprehensive complicates the rules past predictability.
function! TorbijIndent()
    let prev_line = getline(v:lnum - 1)
    let prev_indent = indent(v:lnum - 1)
    let cur_line = getline(v:lnum)
    let inc = 0
    let dec = 0
    for p in g:inc_indent_after
        if prev_line =~# p
            let inc += &sw
            break
        endif
    endfor
    for p in g:dec_indent_on
        if cur_line =~# p
            let dec += &sw
            break
        endif
    endfor
    if inc == 0 && dec == 0
        return -1  " Defer to autoindent.
    endif
    return prev_indent + inc - dec
endfunction

" If the previous line matches one of these patterns, increment the indent of
" the current line.
let g:inc_indent_after = []
cal add(g:inc_indent_after, '[{\[\(:]$')  " Trailing parens/brackets/colons.
cal add(g:inc_indent_after, '\v^\s*(if|elif|while|for).*(; then|; do|:)$')  " sh|Python|Nim control statements
cal add(g:inc_indent_after, '\v^\s*(else\>).*:?$')  " 'else' in various languages
cal add(g:inc_indent_after, '\v^function.*\(\)$')  " VimL function statements.
cal add(g:inc_indent_after, '\v^\s*case.*in$')  " sh case statements

" If the current line matches one of these patterns, decrement its indent.
" Depends on indentkeys being set appropriately.
let g:dec_indent_on = [
    \ '^\s*[}\]\)]',
    \ '^\v\s*(else|elif|elsif)',
    \ '^\v\s*(end|esac|done)'
\ ]
set indentkeys=0},0],0),o,O,0=end,0=esac,0=done,0=else,0=elif,0=elsif
set indentexpr=TorbijIndent()
set ai nosi nocin
filetype indent off

" Lines in a paragraph that happen to start with 'if', 'else', etc will result
" in indentation. Turn off TorbijIndent before formatting to avoid this.
" Despite much effort I haven't been able to wrap gq using map-operator to
" turn off TorbijIndent automatically without breaking comment formatting (the
" indent isn't kept for comment lines following the first).
function! ToggleTorbijIndent()
    if &indentexpr ==# 'TorbijIndent()'
        let &l:indentexpr=''
        echo 'TorbijIndent off'
    else
        let &l:indentexpr='TorbijIndent()'
        echo 'TorbijIndent on'
    endif
endfunction
nn <leader>i :call ToggleTorbijIndent()<cr>

function! GnuC()
  setlocal sw=2 sts=2 ts=8 et
  setlocal cinoptions=>2s,e-s,n-s,f0,{s,^-s,:s,=s,g0,+.5s,p2s,t0,(0 cindent
endfunction

" Spelling
" ========
" The default red background is frequently illegible. Just do reverse instead.
highlight clear SpellBad
highlight SpellBad term=reverse cterm=reverse gui=undercurl guisp=Red

function! ToggleSpell()
    if !&spell
        set spellcapcheck=

        " Avoid checking things that are likely not to be common words.
        " Sometimes other syntax items will override these, see
        " :help syn-priority
        syn match URLNoSpell '\w\+:\/\/[^[:space:]]\+' contains=@NoSpell
        syn match CapitalizedNoSpell '\<[A-Z]\w*\>' contains=@NoSpell
        syn match PossessiveNoSpell '\<\w\+\'s\>' contains=@NoSpell
        " Embedded capital (fileList) or underscore (file_list).
        syn match IdentNoSpell '\<\w\+[A-Z_]\w\+\>' contains=@NoSpell
    endif
    set spell!
endfunction
nn <leader>= :call ToggleSpell()<cr>

" Functions
" =========
function! SourceRange() range
    let tmpsofile = tempname()
    call writefile(getline(a:firstline, a:lastline), l:tmpsofile)
    execute "source " . l:tmpsofile
    call delete(l:tmpsofile)
endfunction
command! -range Source <line1>,<line2>call SourceRange()

" Rename buffer's file.
function! Rename(dst)
     let old = expand('%')
     if (old == a:dst)
         return 0
     endif
     let v:errmsg = ''
     exe 'sav!' fnameescape(a:dst)
     if v:errmsg != ''
       return
     endif
     call delete(old)
endfunction
command! -nargs=1 -complete=file -bar Rename call Rename('<args>')

" Delete buffer and its file.
function! Delete()
    let path = expand('%')
    bdelete
    call delete(path)
endfunction
command! -bar Delete call Delete()

" Count lines in range.
command! -range -nargs=0 Lines echo <line2> - <line1> + 1 "lines"

" Diff current buffer with what's on disk.
function! DiffBuffer()
    let tmp = tempname()
    let absPath = fnamemodify(expand('%'), ':p')
    exe printf('w %s', tmp)
    echo system(printf('diff -u %s %s', absPath, tmp))
    cal delete(tmp)
endfunction
com! DiffBuffer call DiffBuffer()

function! NormalSurround(open, close)
    normal viW<esc>
    cal VisualSurround(a:open, a:close)
endfunction
nn <leader>mb :call NormalSurround('<tt>', '</tt>')<cr>

function! VisualSurround(open, close) range
    let startLine = getline("'<")
    let endLine = getline("'>")
    let startCol = col("'<")
    let endCol = col("'>")
    if line("'<") == line("'>")
        let before = strpart(startLine, 0, startCol - 1)
        let middle = strpart(startLine, startCol - 1, endCol - startCol + 1)
        let after = strpart(startLine, endCol)
        cal setline("'<", before . a:open . middle . a:close . after)
    else
        let before = strpart(startLine, 0, startCol - 1)
        let after = strpart(startLine, startCol - 1)
        cal setline("'<", before . a:open . after)
        let before = strpart(endLine, 0, endCol - 1)
        let after = strpart(endLine, endCol - 1)
        cal setline("'>", before . a:close . after)
    endif
    cal cursor(line("'>"), endCol + strlen(a:open) + strlen(a:close))
endfunction
vn <leader>mb :call VisualSurround('<tt>', '</tt>')<cr>

" Using the given range as a template, generate all combinations of given
" substitutions, adding them below the given range.
"
" usage: TemplateCartesian(<pattern>, <replacements>, <pattern>, <replacements>, ...)
" eg: on a line containing 'ab':
" :.call TemplateCartesian('a', range(2), 'b', range(2))
" 00
" 01
" 10
" 11
function! TemplateCartesian(...) range
    " Organize args.
    let replacementLists = {}
    let patterns = []
    let i = 0
    while i < len(a:000)
        let pattern = a:000[i]
        cal add(patterns, pattern)
        let replacementLists[pattern] = a:000[i+1]
        let i += 2
    endwhile

    " Initialize combination state.
    " If we knew how many patterns were going to be given we could use nested
    " loops to generate the combinations, keeping the combination state in the
    " loop variables and iterators. To handle an arbitrary number of patterns
    " we instead keep the combination state in a list.
    " For example, for two patterns, each with two replacements:
    "   [0, 0] -> [0, 1] -> [1, 0] -> [1, 1]
    " Replacements are selected based on the value of 'combinations'.
    let combination = []
    for p in patterns
        cal add(combination, 0)
    endfor

    let template = join(getline(a:firstline, a:lastline), "\r")
    let lines = []

    " Generate all combinations of replacements.
    while combination[0] < len(replacementLists[patterns[0]])
        let out = template
        for pi in range(len(patterns))  " pi: pattern index
            let pattern = patterns[pi]
            let replacement = replacementLists[pattern][combination[pi]]
            let out = substitute(out, pattern, replacement, "g")
        endfor

        cal extend(lines, split(out, "\r"))

        " Increase the combination counters, carrying as necessary depending
        " on the number of replacements associated with a pattern.
        let combination[-1] += 1
        for i in range(len(combination) - 1, 1, -1)
            if combination[i] >= len(replacementLists[patterns[i]])
                let combination[i] = 0
                let combination[i-1] += 1
            endif
        endfor
    endwhile

    cal append(a:lastline, lines)
endfunction

" Using the given range as a template, generate a substitution for each set of
" replacements, adding them below the given range.
"
" usage: TemplateCartesian(<pattern>, <replacements>, <pattern>, <replacements>, ...)
" eg: on a line containing 'ab':
" :.call TemplateCartesian('a', [1, 2], 'b', [3, 4])
" 13
" 24
function! TemplateLinear(...) range
    " Organize args.
    let replacementLists = {}
    let i = 0
    while i < len(a:000)
        let pattern = a:000[i]
        let replacementLists[pattern] = a:000[i+1]
        let i += 2
    endwhile

    let nrepl = len(values(replacementLists)[0])
    for [k, v] in items(replacementLists)
        if len(v) != nrepl
            throw "wrong number of replacements for " . k
        endif
    endfor

    let template = join(getline(a:firstline, a:lastline), "\r")
    let lines = []

    for i in range(nrepl)
        " Make substitutions.
        let out = template
        for [pattern, replacements] in items(replacementLists)
            let repl = replacements[i]
            let out = substitute(out, '\C' . pattern, repl, "g")
        endfor

        cal extend(lines, split(out, "\r"))
    endfor

    cal append(a:lastline, lines)
endfunction

function! Semicolon() range
    for i in range(a:firstline, a:lastline)
        let line = getline(i)
        if line =~ '^\s*$' | echo 'blank' | continue | endif  " blanks
        if line =~ '\v^\s*(#|//)' | echo 'scomm' | continue | endif  " comments at start
        " Skip comments at the end of a line. Try not to match comment
        " indicators in strings, though.
        if line =~ "\\v(#|//)[^'\"]*$" | echo 'ecomm' | continue | endif
        " Skip lines ending with characters that imply continuance. Also,
        " lines ending with } often don't want a semicolon.
        if line =~ '\v[\[\{,\(; \}]$' | echo 'cont' | continue | endif
        if getline(i + 1) =~ '\v^\s*\.' | echo 'chain' | continue | endif  " method chains
        cal setline(i, line . ';')
    endfor
endfunction

function! RedirToTab(cmd)
  redir => message
  silent execute a:cmd
  redir END
  if empty(message)
    echoerr "no output"
  else
    " use "new" instead of "tabnew" below if you prefer split windows instead of tabs
    tabnew
    setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
    silent put=message
  endif
endfunction
command! -nargs=+ -complete=command RedirToTab call RedirToTab(<q-args>)

command! -range Semicolon <line1>,<line2>call Semicolon()
nn <leader>; :Semicolon<cr>
vn <leader>; :Semicolon<cr>

command! -range=% Copy silent <line1>,<line2>w !xsel -i -b
nn <leader>c :Copy<cr>
vn <leader>c :Copy<cr>


" Insert using CTRL-R and the expression register.
function! Date()
    return strftime("%Y-%m-%d %a")
endfunction

function! Timestamp()
    return strftime("%Y-%m-%d %H:%M %a")
endfunction

function! TimestampIso()
    return strftime("%Y-%m-%dT%H:%M")
endfunction

" Collect lines matching pattern into register g.
command! -nargs=? Collect let @g = '' | execute 'g/<args>/y G' | let @g = @g[1:]

function! Chars(start, stop)
    let result = ""
    let i = a:start
    while i < a:stop
        let result .= nr2char(i)
        let i += 1
    endwhile
    return result
endfunction


" split: 'none', 'split', 'vsplit'
function! OpenOrReuse(filepath, split)
    let buffer_name = a:filepath
    let window = bufwinnr(buffer_name)
    if window != -1
        exe printf('%dwincmd w', window)
    else
        exe printf('silent! %s %s', a:split, buffer_name)
    endif
endfunction

function! QFComment(comment_file)
    let filepath = expand('%')
    let lnum = line('.')
    " There needs to something after the last colon or the line won't match
    " any of the default errorformat patterns.
    let prefix = join([filepath, lnum], ':') . ': '
    cal OpenOrReuse(a:comment_file, 'split')
    if getline(1, '$') == ['']
        cal setline(1, prefix)
    else
        cal append(line('$'), prefix)
    endif
    normal G$
endfunction
command! -nargs=? -complete=file QFComment cal QFComment(<f-args>)
nn <leader>mc :QFComment ~/tmp/comments<cr>
cabbrev QF QFComment

" Idempotent table formatter.
" sep: field separator pattern
" opts: dict with the following keys:
"   align: string of field alignments (eg. "llr" for Left, Left, Right)
"   newsep: new separator. Useful if regex metacharacters are present in sep.
"   ignorecomments: True/False. Leave comment lines alone.
"   ignore1fcomments: True/False. Leave comments with a single field alone.
function! Table(sep, opts) range
    let alignment = split(get(a:opts, 'align', ""), '\zs')
    let max_len = {}
    for line in getline(a:firstline, a:lastline)
        if get(a:opts, "ignorecomments", 0) && line =~ '^\v\s*(//|/\*|#).*'
            continue
        endif
        if get(a:opts, "ignore1fcomments", 0) && line =~ '^\v\s*(//|/\*|#).*' && line !~ a:sep
            continue
        endif
        for [i, field] in util#enumerate(split(line, a:sep))
            let field = substitute(field, ' *(.{-}) *', '\1', "")
            let max_len[i] = max([get(max_len, i, 0), strlen(field)])
        endfor
    endfor
    if len(max_len) == 0
        return
    endif
    let formatted = []
    for line in getline(a:firstline, a:lastline)
        if get(a:opts, "ignorecomments", 0) && line =~ '^\v\s*(//|/\*|#).*'
            cal add(formatted, line)
            continue
        endif
        if get(a:opts, "ignore1fcomments", 0) && line =~ '^\v\s*(//|/\*|#).*' && line !~ a:sep
            cal add(formatted, line)
            continue
        endif
        let fields = []
        for [i, field] in util#enumerate(split(line, a:sep))
            let field = substitute(field, ' *(.{-}) *', '\1', "")
            if get(alignment, i, 'l') == 'l'
                let format = printf('%%-%ds', max_len[i])
            else
                let format = printf('%%%ds', max_len[i])
            endif
            cal add(fields,  printf(format, field))
        endfor
        cal add(formatted, substitute(join(fields, get(a:opts, 'newsep', a:sep)), '\v *$', '', ''))
    endfor
    cal setline(a:firstline, formatted)
endfunction
nn <leader>mt :exe printf('%scal Table(" \\{2,}", {"newsep": "  "})', util#cpar_line_range_str())<cr>
vn <leader>mt :cal Table(' \{2,}', {'newsep': '  '})<cr>
command! -range AlignComments <line1>,<line2>call Table('\v +\ze[/#]', {'newsep': ' '})

" Make script-local function global.
function! Public(function_name)
    let groups = matchlist(a:function_name, '\v^(<SID>|s:)(.*)')
    let prefix = groups[1]
    let basename = groups[2]
    exe printf('%%s/%s\>/\u%s/g', a:function_name, basename)
endfunction
nn sme :cal Public(expand('<cword>'))<cr>

" Hide global function by making it script-local.
function! Private(function_name)
    exe printf('%%s/\<%s\>/s:\l&/g', a:function_name)
endfunction
nn smh :cal Private(expand('<cword>'))<cr>

function! RightAlignSecondField()
    let line = getline('.')
    let tw = &textwidth == 0 ? 78 : &textwidth
    let fields = split(line, '\v {2,}')
    if len(fields) > 2
        throw 'Too many fields.'
    endif
    let pad_width = tw - len(fields[0]) - len(fields[1])
    cal setline('.', fields[0] . repeat(' ', pad_width) . fields[1])
endfunction

" Convert a path selected in visual mode to quoted list items.
" eg: /a/b/c -> 'a', 'b', 'c'
function! PathToQuoted()
    let line = getline('.')
    let start = col("'<")
    let len = col("'>") - start + 1
    let path = strpart(line, start - 1, len)
    let quoted = "'" . join(split(path, '/'), "', '"). "'"
    cal setline('.', strpart(line, 0, start - 1) . quoted . strpart(line, start + len - 1))
endfunction
no <leader>mq :call PathToQuoted()<cr>

" Join lines, trimming whitespace from all but the first.
function! JoinNoWhitespace() range
    let pos = getpos('.')
    let lastline = a:lastline
    if a:firstline == lastline
        let lastline += 1
    endif
    let lines = getline(a:firstline, lastline)
    for i in range(1, len(lines) - 1)
        let lines[i] = util#trim(lines[i])
    endfor
    cal setline(a:firstline, join(lines, ''))
    exe printf("%d,%dd", a:firstline + 1, lastline)
    call setpos('.', pos)
endfunction
command! -range JoinNoWhitespace <line1>,<line2>call JoinNoWhitespace()
nn <leader>J :JoinNoWhitespace<cr>
vn <leader>J :JoinNoWhitespace<cr>

" Assign-and-increase function intended to be used when making substitutions
" using the expression register. For example, to replace 'X's with
" 1, 2, 3, ...: let i=1 | s/X/\=Inc(1)/g
let g:i = 1
function! Inc(step)
    let g:i += a:step
    return g:i - a:step
endfunction

" A weak fuzzy file finder for use in environments where installing vim
" plugins or other executables isn't possible or worth it.
"
" If a single file under the current directory contains the given substrings
" in order, edit that file in the current window. Otherwise print the files
" that matched.
"
" Surprisingly, this feels like 70% of what I need from a fuzzy file finder.
"
" eg:
"   :E parts of a file path
function! EditFileLikeSubstrings(...)
    let pattern = ''
    for arg in a:000
        let pattern .= '*' . arg
    endfor
    let pattern .= '*'
    let cmd = "find . -name .git -prune -o -type f -not -name '*.sw[opq]' -ipath %s -print"
    let files = systemlist(printf(cmd, shellescape(pattern)))
    if len(files) == 1
        exe 'e ' . files[0]
    elseif len(files) == 0
        echo 'No files matched.'
    else
        echo 'Multiple files matched:'
        for f in files
            echo f
        endfor
    endif
endfunction
command! -nargs=+ E cal EditFileLikeSubstrings(<f-args>)

" Switch between C header and implementation files.
function! HOrC(filepath)
    if a:filepath =~ '\.c$'
        exe 'e ' . substitute(a:filepath, '\.c$', '.h', '')
    else
        exe 'e ' . substitute(a:filepath, '\.h$', '.c', '')
    endif
endfunction
nn <leader>o :call HOrC(expand('%'))<cr>

" Plugin configuration
" ====================
let g:ConqueTerm_CWInsert = 1
let g:NERDTreeDirArrows=0
let g:pyflakes_use_quickfix = 0
let g:CommandTMaxHeight = 20

let g:slime_target = 'tmux'
let g:slime_no_mappings = 1
let g:slime_default_config = {"socket_name": "default", "target_pane": ":.1"}
nmap <leader>a <Plug>SlimeParagraphSend

let g:syntastic_mode_map = {'mode': 'passive'}
let g:syntastic_python_checkers = ['flake8']

" Rut
let g:rut_projects = [{
  \'pattern': '\v/bdmstest[0-9]?(/|$)',
  \'test_dir': 'spec',
  \'source2unit': ['\v.*lib/bdmstest/(.*/?)([^/]*)\.rb', 'spec/\1\2_spec.rb'],
  \'unit2source': ['\v.*spec/(.*/)?([^/]*)_spec\.rb', 'lib/bdmstest/\1\2.rb'],
  \'runner': 'bundle exec rspec',
  \'errorformat': '%A %#Failure/Error:%.%#,%Z %## %f:%l:%m,%C%m',
\}]

"    Failure/Error: loader = LogLoad::SOAPSimulator.new(@sim.id, @sim.started_at, 'no_such_dir')
"    ArgumentError:
"      wrong number of arguments (3 for 1)
"    # ./lib/bdmstest/log_load/soap_simulator.rb:12:in `initialize'

" Vipyut
let g:vipyut_projects = [
    \ {
        \ 'pattern': '\v/bdmstest[0-9]?(/|$)',
        \ 'unittests': 'spec',
        \ 'source2unit': ['\v.*/lib/bdmstest/(.*/?)([^/]*)\.rb', '\1\2_spec.rb'],
        \ 'unit2source': ['\v.*/spec/(.*/)?([^/]*)_spec\.rb', 'lib/bdmstest/\1\2.rb'],
        \ 'runner': 'bundle exec rspec -r jt/rspec_vim_formatter.rb -f VimFormatter',
    \ },
\]
let g:vipyut_openOutputOnFail = 0

" Probe
let g:probe_ignore_files = ['\~$', '/_\?build$', '\.pyc$', 'freetds-.*', '\.class$', '/target$', '\.sw[pon]$', '\.\(o\|so\)$']
command! ProbeFindTc :cal probe#open(
    \ function('probe#tc#scan'),
    \ function('probe#tc#open'),
    \ function('probe#tc#refresh'))
nn <leader>d :ProbeFindFile<cr>
nn <leader>f :ProbeFindInRepo<cr>

" Jedi
let g:jedi#goto_assignments_command = "<leader>jg"
let g:jedi#goto_definitions_command = "<leader>jd"
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>jn"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>jr"
let g:jedi#show_call_signatures = "0"
let g:jedi#popup_on_dot = 0
let g:jedi#popup_select_first = 0

nn <leader>t :TagbarOpenAutoClose<cr>
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }

let g:tagbar_type_markdown = {
    \ 'ctagstype': 'markdown',
    \ 'ctagsbin' : '~/.local/bin/markdown2ctags',
    \ 'ctagsargs' : '-f - --sort=yes',
    \ 'kinds' : [
        \ 's:sections',
        \ 'i:images'
    \ ],
    \ 'sro' : '|',
    \ 'kind2scope' : {
        \ 's' : 'section',
    \ },
    \ 'sort': 0,
\ }

" Quickfix
" ========
function! GrepDiff(range, query, ...)
    let grep_args = ''
    if a:0 > 0
        let grep_args = a:1
    endif
    let &l:makeprg = printf("git diff --relative %s \\| linewise -rm \\| grep %s -E %s", a:range, grep_args, a:query)
    make
endfunction
command! -nargs=+ GrepDiff call GrepDiff(<f-args>)
cabbrev GD GrepDiff

function! Cfind(...)
    let saved_grepprg = &grepprg
    let &grepprg = "cfind -n"
    exe "grep " . join(a:000, ' ')
    let &grepprg = saved_grepprg
endfunction
command! -nargs=+ Cfind call Cfind(<f-args>)
cabbrev Cf Cfind

function! Fifm(...)
    let saved_grepprg = &grepprg
    let &grepprg = "fifm"
    exe "grep " . join(a:000, ' ')
    let &grepprg = saved_grepprg
endfunction
command! -nargs=+ Fifm call Fifm(<f-args>)

function! Pylint()
    let &l:makeprg = "pylint -f parseable -i y -r n %"
    let &l:efm = "%f:%l: %m"
    make!
endfunction
command! Pl call Pylint()

function! RBCheck(...)
    let &l:makeprg = 'rb_check'
    exe "make " . join(a:000, ' ')
endfunction
command! -nargs=* RBCheck call RBCheck(<f-args>)

function! Pep()
    let &l:makeprg = 'pep'
    make %
endfunction
command! Pep call Pep(<f-args>)
nn <leader>mp :cal Pep()<cr>

function! GitTrailingWhitespace(...)
    let prefix = util#trim(system("git rev-parse --show-prefix"))
    let &l:makeprg = "git diff --check " . join(a:000)
    let &l:efm = prefix . "%f:%l: %m"
    make!
endfunction
command! -nargs=* Gtw call GitTrailingWhitespace('<args>')

" Fill the quickfix list with pylint output. Run pylint on all the files
" changed since the last commmit (default) or between given revisions, which
" are passed straight to git diff.
function! PylintGit(...)
    let command = "git diff --name-only " . join(a:000)
    let pathsFromRepoRoot = split(system(command), "\n")
    let prefixLength = strlen(util#trim(system("git rev-parse --show-prefix")))
    let paths = []
    for path in pathsFromRepoRoot
        call add(paths, strpart(path, prefixLength))
    endfor
    let &l:makeprg = "pylint -f parseable -i y -r n " . join(paths, ' ')
    let &l:efm = "%f:%l: %m"
    make!
endfunction
command! -nargs=* Pg call PylintGit('<args>')

" Set the quickfix list to chunks of changes as shown by git diff.
" Passes its arguments straight to git diff, so by default it diffs the working
" directory with HEAD.
" Sets the first non-empty changed line as the description, if possible.
" Possibly superceded by git-jump.
function! QuickfixGitDiff(...)
    let command = "git diff -U0 " . join(a:000)
    let lines = split(system(command), '\n')
    " Relative paths would be nice but absolute paths are far easier.
    let repoRoot = util#trim(system("git rev-parse --show-toplevel"))
    let file = ''
    let locList = []
    let i = 0
    while i < len(lines)
        let line = lines[i]
        if match(line, '^diff') != -1
            let file = repoRoot .  '/' . matchlist(line, '\v b/(.*)$')[1]
        elseif match(line, '^@@') != -1
            let lineNum = matchlist(line, '\v.* \+(\d*)')[1]
            let descIndex = i + 1
            while len(lines[descIndex]) == 1 && descIndex < len(lines) - 1
                let descIndex += 1
            endwhile
            if match(lines[descIndex], '^diff\|^@@') != -1
                let descIndex = i + 1
            endif
            cal add(locList, {'filename': file, 'lnum': lineNum, 'text': lines[descIndex]})
        endif
        let i += 1
    endwhile
    call setqflist(locList)
endfunction
command! -nargs=* Gdqf call QuickfixGitDiff('<args>')

function! SilentMake(...)
    if a:0 >= 1
        " TODO: support more args
        execute "silent! make! " . a:1
    else
        silent! make!
    endif
    redraw!
endfunction
com! -nargs=? Make call SilentMake(<f-args>)

function! QuickfixConflicts()
    let files = util#trim(system("git status -s | grep '^\\(UU\\|AA\\)' | awk '{print $2}' | tr '\n' ' '"))
    silent! exe printf(":grep '[<]<<<<<<' %s", files)
    redraw!
endfunction
com! -nargs=0 Conflicts call QuickfixConflicts()

" Insert-mode abbreviations
autocmd FileType java iabbrev <buffer> sop System.out.println
autocmd FileType rust iabbrev <buffer> pl println!

autocmd Filetype java setlocal sts=2 sw=2 ts=2
autocmd Filetype ruby setlocal sts=2 sw=2 ts=2
autocmd Filetype lisp filetype indent on
autocmd Filetype go setlocal noet
autocmd Filetype c setlocal cindent indentexpr= noet
autocmd Filetype cpp setlocal cindent indentexpr= noet


" Tips
"
" Evaluate vimscript almost anywhere using the expression register: <c-r>=
"
" Globally replace the word under the cursor with something else:
" :nn <leader>r :exec printf('%%s#\<%s\>#self.%s#g', expand('<cword>'), expand('<cword>'))<cr>
"
" Use substitute and eval together:
" '<,'>s/{{\([^}]\+\)}}/\=eval(submatch(1))/g
"
" You can basically get tab-specific working directories using :lcd.

if filereadable(expand('~/.vimrc.local'))
    source ~/.vimrc.local
endif
noh

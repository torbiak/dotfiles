" setup runtimepath to be more unixy on windows
set rtp-=~/vimfiles
set rtp+=~/.vim

let g:pathogen_disabled = ['vipyut']
call pathogen#infect()
call pathogen#helptags()

" Basics
" ======
filetype plugin on
set encoding=utf-8
set tags+=.tags
set laststatus=2 ruler
set sts=4 ts=8 sw=4 et
set ic hls smartcase incsearch
set showmatch matchtime=2  " paren-matching
set wildmode=list
set grepprg=rg\ --vimgrep\ -S
set bs=2
set complete=.,w  " stay fast by only suggesting completions from open windows
set winminheight=0
set modeline
set more
set backup
set shellslash
set cryptmethod=blowfish2
if exists("*mkdir") && !isdirectory(expand('~/tmp/vim'))
    cal mkdir(expand('~/tmp/vim'), 'p')
endif
set backupdir=~/tmp/vim,.
ino jk <esc>
let mapleader = 's'
nn <leader> <nop>
set vb t_vb=
nn Y y$

" This changes the behaviour of shellescape() and is necessary for the zip
" plugin's s:Escape() function which surrounds filenames with double quotes.
" noshellslash should probably be set when using vim on windows without
" cygwin.
if has('win32')
    set noshellslash
endif

" Display
syntax enable
set guioptions='cM'
set t_Co=16  " Use terminal color palette instead of 8-bit color.
set background=dark
augroup color_mods
    au!
    " Use the default fg/bg colors for dark 4-bit schemes.
    au ColorScheme * {
        if str2nr(&t_Co) == 16 && &background ==# 'dark'
            hi Normal ctermfg=NONE ctermbg=NONE
        endif
    }

    au ColorScheme * hi DiffAdd cterm=NONE ctermfg=DarkGreen ctermbg=DarkGrey
    au ColorScheme * hi DiffChange cterm=NONE ctermfg=DarkYellow ctermbg=DarkGrey
    au ColorScheme * hi DiffDelete cterm=NONE ctermfg=DarkRed ctermbg=DarkGrey
    au ColorScheme * hi DiffText cterm=NONE ctermfg=Black ctermbg=DarkYellow
augroup END
colorscheme pablo
set list
set listchars=tab:»\ ,trail:·,

" Emacs emulation in Cmdline mode.
cnoremap <C-S> <C-D>
cnoremap <C-A> <Home>
cnoremap <C-B> <Left>
cnoremap <C-D> <Del>
cnoremap <C-E> <End>
cnoremap <C-F> <Right>
cnoremap <C-N> <Down>
cnoremap <C-P> <Up>
cnoremap <esc>b <S-Left>
cnoremap <esc>f <S-Right>
cnoremap <esc><bs> <C-w>

" Cycle forward/backward through wildmode matches.
cnoremap <M-m> <C-N>
cnoremap <esc>m <C-N>
cnoremap <M-M> <C-P>
cnoremap <esc>M <C-P>

" Forward/Back in insert mode
inoremap <C-B> <Left>
inoremap <C-F> <Right>

" Open balanced surroundings.
ino ;{ {<cr>}<esc>O
ino ;[ []<esc>i
ino ;( ()<esc>i
ino ;" ""<esc>i
ino ;' ''<esc>i

" Quickfix
" I don't find the default bindings for -, _, and + useful, but I use the
" quickfix list all the time.
nn - :cp<cr>
nn + :cn<cr>
function! JumpToFirstValidError()
    let qflist = getqflist()
    for i in range(len(qflist))
        if qflist[i]['valid'] == v:true
            exe printf(':cc %d', i+1)
            return
        endif
    endfor
endfunction
nn _ :call JumpToFirstValidError()<cr>


" Arglist
nn <leader>n :wn<cr>
nn <leader>N :N<cr>

" vimrc
nn <leader>ve :e ~/.vimrc<cr>
nn <leader>vn :new ~/.vimrc<cr>
nn <leader>vs :source ~/.vimrc<cr>

" Windowing
" I often have a lot of windows open in two columns and want to navigate
" through a bunch of them quickly.
nn <c-j> <c-w>j
nn <c-k> <c-w>k

" Yank/paste
" Paste yanks.
nn <leader>p "0p
nn <leader>P "0P

" Tab widths
nn <leader>8 :set sts=8 ts=8 sw=8 et<cr>
nn <leader>4 :set sts=4 ts=4 sw=4 et<cr>
nn <leader>2 :set sts=2 ts=2 sw=2 et<cr>

" Jump between methods
"
" ]m works for opening-brace-at-beginning-of-line C functions like ]], as well
" as cuddled opening braces for Java-style methods, so make it more
" convenient.
nn ]] ]m
nn [[ [m

" Various conveniences
nn <leader>mp :set paste!<cr>
nn <leader>h :noh<cr>
nn <leader>g :grep <cword><cr>
nn <c-w>g :grep! <cword><cr>:new<cr>:cc 1<cr>
" remove trailing whitespace
nn <leader>mw :%s/\v\s+$//<cr>
nn <leader>ms :w<cr>:source %<cr>
nn <leader>x :source ~/source.vim<cr>
nn <leader>y :let @y = @"<cr>


" Formatting
" j: remove comment markers when joining lines
" q: allow formatting comments with gq
set formatoptions+=jq
" Don't insert two spaces after sentences when joining lines.
set nojoinspaces
" Don't use Q for Ex mode, use it for formatting.
noremap Q gq


" Indenting
" =========
" One indenting expression to rule them all.
"
" Cover common cases but let the user take care of anything weird, since
" trying to be comprehensive complicates the rules past predictability.
function! TorbijIndent()
    let prev_line = getline(v:lnum - 1)
    let prev_indent = indent(v:lnum - 1)
    let cur_line = getline(v:lnum)
    let inc = 0
    let dec = 0
    for p in g:inc_indent_after
        if prev_line =~# p
            let inc += &sw
            break
        endif
    endfor
    for p in g:dec_indent_on
        if cur_line =~# p
            let dec += &sw
            break
        endif
    endfor
    if inc == 0 && dec == 0
        return -1  " Defer to autoindent.
    endif
    return prev_indent + inc - dec
endfunction

" If the previous line matches one of these patterns, increment the indent of
" the current line.
let g:inc_indent_after = []
cal add(g:inc_indent_after, '[{\[\(:]$')  " Trailing parens/brackets/colons.
cal add(g:inc_indent_after, '\v^\s*(if|elif|while|for).*(; then|; do|:)$')  " sh|Python|Nim control statements
cal add(g:inc_indent_after, '\v^\s*(else\>).*:?$')  " 'else' in various languages
cal add(g:inc_indent_after, '\v^function.*\(\)$')  " VimL function statements.
cal add(g:inc_indent_after, '\v^\s*case.*in$')  " sh case statements

" If the current line matches one of these patterns, decrement its indent.
" Depends on indentkeys being set appropriately.
let g:dec_indent_on = [
    \ '^\s*[}\]\)]',
    \ '^\v\s*(else|elif|elsif)',
    \ '^\v\s*(end|esac|done)'
\ ]
set indentkeys=0},0],0),o,O,0=end,0=done,0=else,0=elif,0=elsif
set indentexpr=TorbijIndent()
set ai nosi nocin
filetype indent off

" Lines in a paragraph that happen to start with 'if', 'else', etc will result
" in indentation. Turn off TorbijIndent before formatting to avoid this.
" Despite much effort I haven't been able to wrap gq using map-operator to
" turn off TorbijIndent automatically without breaking comment formatting (the
" indent isn't kept for comment lines following the first).
function! ToggleTorbijIndent()
    if &indentexpr ==# 'TorbijIndent()'
        let &l:indentexpr=''
        echo 'TorbijIndent off'
    else
        let &l:indentexpr='TorbijIndent()'
        echo 'TorbijIndent on'
    endif
endfunction
nn <leader>i :call ToggleTorbijIndent()<cr>

function! GnuC()
  setlocal sw=2 sts=2 ts=8 et
  setlocal cinoptions=>2s,e-s,n-s,f0,{s,^-s,:s,=s,g0,+.5s,p2s,t0,(0 cindent
endfunction

" Spelling
" ========
function! ToggleSpell()
    if !&spell
        set spellcapcheck=

        " Avoid checking things that are likely not to be common words.
        " Sometimes other syntax items will override these, see
        " :help syn-priority
        syn match URLNoSpell '\w\+:\/\/[^[:space:]]\+' contains=@NoSpell
        syn match CapitalizedNoSpell '\<[A-Z]\w*\>' contains=@NoSpell
        syn match PossessiveNoSpell '\<\w\+\'s\>' contains=@NoSpell
        " Embedded capital (fileList) or underscore (file_list).
        syn match IdentNoSpell '\<\w\+[A-Z_]\w\+\>' contains=@NoSpell
    endif
    set spell!
endfunction
nn <leader>= :call ToggleSpell()<cr>

" Functions
" =========
function! SourceRange() range
    let tmpsofile = tempname()
    call writefile(getline(a:firstline, a:lastline), l:tmpsofile)
    execute "source " . l:tmpsofile
    call delete(l:tmpsofile)
endfunction
command! -range Source <line1>,<line2>call SourceRange()

" Rename buffer's file.
function! Rename(dst)
    let old = expand('%')
    if (old == a:dst)
        return
    endif
    if rename(old, a:dst) != 0
       echom 'rename failed'
       return
    endif
    exe 'e!' a:dst
endfunction
command! -nargs=1 -complete=file -bar Rename call Rename('<args>')

" Delete buffer and its file.
function! Delete()
    let path = expand('%')
    bdelete
    call delete(path)
endfunction
command! -bar Delete call Delete()

function! PlusExecutable()
    silent! !chmod +x %
    redraw!
endfunction
command! Px cal PlusExecutable()

" Count lines in range.
command! -range -nargs=0 Lines echo <line2> - <line1> + 1 "lines"

" Diff current buffer with what's on disk.
function! DiffBuffer()
    let tmp = tempname()
    let absPath = fnamemodify(expand('%'), ':p')
    exe printf('w %s', tmp)
    echo system(printf('diff -u %s %s', absPath, tmp))
    cal delete(tmp)
endfunction
com! DiffBuffer call DiffBuffer()

function! NormalSurround(open, close)
    normal viW<esc>
    cal VisualSurround(a:open, a:close)
endfunction
nn <leader>mb :call NormalSurround('<tt>', '</tt>')<cr>

function! VisualSurround(open, close) range
    let startLine = getline("'<")
    let endLine = getline("'>")
    let startCol = col("'<")
    let endCol = col("'>")
    if line("'<") == line("'>")
        let before = strpart(startLine, 0, startCol - 1)
        let middle = strpart(startLine, startCol - 1, endCol - startCol + 1)
        let after = strpart(startLine, endCol)
        cal setline("'<", before . a:open . middle . a:close . after)
    else
        let before = strpart(startLine, 0, startCol - 1)
        let after = strpart(startLine, startCol - 1)
        cal setline("'<", before . a:open . after)
        let before = strpart(endLine, 0, endCol - 1)
        let after = strpart(endLine, endCol - 1)
        cal setline("'>", before . a:close . after)
    endif
    cal cursor(line("'>"), endCol + strlen(a:open) + strlen(a:close))
endfunction
vn <leader>mb :call VisualSurround('<tt>', '</tt>')<cr>

" Using the given range as a template, generate all combinations of given
" substitutions, adding them below the given range.
"
" usage: TemplateCartesian(<pattern>, <replacements>, <pattern>, <replacements>, ...)
" eg: on a line containing 'ab':
" :.call TemplateCartesian('a', range(2), 'b', range(2))
" 00
" 01
" 10
" 11
function! TemplateCartesian(...) range
    " Organize args.
    let replacementLists = {}
    let patterns = []
    let i = 0
    while i < len(a:000)
        let pattern = a:000[i]
        cal add(patterns, pattern)
        let replacementLists[pattern] = a:000[i+1]
        let i += 2
    endwhile

    " Initialize combination state.
    " If we knew how many patterns were going to be given we could use nested
    " loops to generate the combinations, keeping the combination state in the
    " loop variables and iterators. To handle an arbitrary number of patterns
    " we instead keep the combination state in a list.
    " For example, for two patterns, each with two replacements:
    "   [0, 0] -> [0, 1] -> [1, 0] -> [1, 1]
    " Replacements are selected based on the value of 'combinations'.
    let combination = []
    for p in patterns
        cal add(combination, 0)
    endfor

    let template = join(getline(a:firstline, a:lastline), "\r")
    let lines = []

    " Generate all combinations of replacements.
    while combination[0] < len(replacementLists[patterns[0]])
        let out = template
        for pi in range(len(patterns))  " pi: pattern index
            let pattern = patterns[pi]
            let replacement = replacementLists[pattern][combination[pi]]
            let out = substitute(out, pattern, replacement, "g")
        endfor

        cal extend(lines, split(out, "\r"))

        " Increase the combination counters, carrying as necessary depending
        " on the number of replacements associated with a pattern.
        let combination[-1] += 1
        for i in range(len(combination) - 1, 1, -1)
            if combination[i] >= len(replacementLists[patterns[i]])
                let combination[i] = 0
                let combination[i-1] += 1
            endif
        endfor
    endwhile

    cal append(a:lastline, lines)
endfunction

" Using the given range as a template, generate a substitution for each set of
" replacements, adding them below the given range.
"
" usage: TemplateCartesian(<pattern>, <replacements>, <pattern>, <replacements>, ...)
" eg: on a line containing 'ab':
" :.call TemplateCartesian('a', [1, 2], 'b', [3, 4])
" 13
" 24
function! TemplateLinear(...) range
    " Organize args.
    let replacementLists = {}
    let i = 0
    while i < len(a:000)
        let pattern = a:000[i]
        let replacementLists[pattern] = a:000[i+1]
        let i += 2
    endwhile

    let nrepl = len(values(replacementLists)[0])
    for [k, v] in items(replacementLists)
        if len(v) != nrepl
            throw "wrong number of replacements for " . k
        endif
    endfor

    let template = join(getline(a:firstline, a:lastline), "\r")
    let lines = []

    for i in range(nrepl)
        " Make substitutions.
        let out = template
        for [pattern, replacements] in items(replacementLists)
            let repl = replacements[i]
            let out = substitute(out, '\C' . pattern, repl, "g")
        endfor

        cal extend(lines, split(out, "\r"))
    endfor

    cal append(a:lastline, lines)
endfunction

function! Semicolon() range
    for i in range(a:firstline, a:lastline)
        let line = getline(i)
        if line =~ '^\s*$' | echo 'blank' | continue | endif  " blanks
        if line =~ '\v^\s*(#|//)' | echo 'scomm' | continue | endif  " comments at start
        " Skip comments at the end of a line. Try not to match comment
        " indicators in strings, though.
        if line =~ "\\v(#|//)[^'\"]*$" | echo 'ecomm' | continue | endif
        " Skip lines ending with characters that imply continuance. Also,
        " lines ending with } often don't want a semicolon.
        if line =~ '\v[\[\{,\(; \}]$' | echo 'cont' | continue | endif
        if getline(i + 1) =~ '\v^\s*\.' | echo 'chain' | continue | endif  " method chains
        cal setline(i, line . ';')
    endfor
endfunction
command! -range Semicolon <line1>,<line2>call Semicolon()
nn <leader>; :Semicolon<cr>
vn <leader>; :Semicolon<cr>

function! RedirToTab(cmd)
  redir => message
  silent execute a:cmd
  redir END
  if empty(message)
    echoerr "no output"
  else
    " use "new" instead of "tabnew" below if you prefer split windows instead of tabs
    tabnew
    setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
    silent put=message
  endif
endfunction
command! -nargs=+ -complete=command RedirToTab call RedirToTab(<q-args>)

" Insert using CTRL-R and the expression register.
function! Date(...)
    if a:0 == 0
        let days_offset = 0
    elseif a:0 == 1
        let days_offset = a:1
    else
        throw "usage: Date([days_offset])"
    endif
    return strftime("%Y-%m-%d %a", localtime() + 86000 * days_offset)
endfunction

function! Today()
    return Date(0)
endfunction

function! Timestamp()
    return strftime("%Y-%m-%dT%H:%M")
endfunction

" Collect lines matching pattern into register g.
command! -nargs=? Collect let @g = '' | execute 'g/<args>/y G' | let @g = @g[1:]

function! Chars(start, stop)
    let result = ""
    let i = a:start
    while i < a:stop
        let result .= nr2char(i)
        let i += 1
    endwhile
    return result
endfunction


" split: 'none', 'split', 'vsplit'
function! OpenOrReuse(filepath, split)
    let buffer_name = a:filepath
    let window = bufwinnr(buffer_name)
    if window != -1
        exe printf('%dwincmd w', window)
    else
        exe printf('silent! %s %s', a:split, buffer_name)
    endif
endfunction

" Load notes from the current window into the quickfix list.
function! QfLoad()
    if &autowrite
        write
    endif
    let &l:grepprg = 'cat %'  " This won't work on Windows.
    let &l:grepformat = '%A%f:%l:%m <<--,%Z--,%f:%l:%m,%+C%.%#,%.%#'
    grep!
endfunction
command! -nargs=0 QfLoad cal QfLoad()

" Create a review note for the current line.
function! QfNote(note_file)
    let filepath = expand('%')
    let lnum = line('.')
    " There needs to something after the last colon or the line won't match
    " any of the default errorformat patterns.
    let prefix = join([filepath, lnum], ':') . ': '
    cal OpenOrReuse(a:note_file, 'split')
    if line('$') == 1 && getline(1) == ''
        cal setline(1, prefix)
    else
        cal append(line('$'), prefix)
    endif
    normal G$
endfunction
command! -nargs=? -complete=file QfNote cal QfNote(<f-args>)


" Idempotent table formatter.
" sep: field separator pattern
" opts: dict with the following keys:
"   align: string of field alignments (eg. "llr" for Left, Left, Right)
"   newsep: new separator. Useful if regex metacharacters are present in sep.
"   ignorecomments: True/False. Leave comment lines alone.
"   ignore1fcomments: True/False. Leave comments with a single field alone.
function! Table(sep, opts) range
    let alignment = split(get(a:opts, 'align', ""), '\zs')
    let max_len = {}
    for line in getline(a:firstline, a:lastline)
        if get(a:opts, "ignorecomments", 0) && line =~ '^\v\s*(//|/\*|#).*'
            continue
        endif
        if get(a:opts, "ignore1fcomments", 0) && line =~ '^\v\s*(//|/\*|#).*' && line !~ a:sep
            continue
        endif
        for [i, field] in util#enumerate(split(line, a:sep))
            let field = substitute(field, ' *(.{-}) *', '\1', "")
            let max_len[i] = max([get(max_len, i, 0), strlen(field)])
        endfor
    endfor
    if len(max_len) == 0
        return
    endif
    let formatted = []
    for line in getline(a:firstline, a:lastline)
        if get(a:opts, "ignorecomments", 0) && line =~ '^\v\s*(//|/\*|#).*'
            cal add(formatted, line)
            continue
        endif
        if get(a:opts, "ignore1fcomments", 0) && line =~ '^\v\s*(//|/\*|#).*' && line !~ a:sep
            cal add(formatted, line)
            continue
        endif
        let fields = []
        for [i, field] in util#enumerate(split(line, a:sep))
            let field = substitute(field, ' *(.{-}) *', '\1', "")
            if get(alignment, i, 'l') == 'l'
                let format = printf('%%-%ds', max_len[i])
            else
                let format = printf('%%%ds', max_len[i])
            endif
            cal add(fields,  printf(format, field))
        endfor
        cal add(formatted, substitute(join(fields, get(a:opts, 'newsep', a:sep)), '\v *$', '', ''))
    endfor
    cal setline(a:firstline, formatted)
endfunction
nn <leader>mt :exe printf('%scal Table(" \\{2,}", {"newsep": "  "})', util#cpar_line_range_str())<cr>
vn <leader>mt :cal Table(' \{2,}', {'newsep': '  '})<cr>
command! -range AlignComments <line1>,<line2>call Table('\v +\ze[/#]', {'newsep': ' '})

" Make script-local function global.
function! Public(function_name)
    let groups = matchlist(a:function_name, '\v^(<SID>|s:)(.*)')
    let prefix = groups[1]
    let basename = groups[2]
    exe printf('%%s/%s\>/\u%s/g', a:function_name, basename)
endfunction
nn sme :cal Public(expand('<cword>'))<cr>

" Hide global function by making it script-local.
function! Private(function_name)
    exe printf('%%s/\<%s\>/s:\l&/g', a:function_name)
endfunction
nn smh :cal Private(expand('<cword>'))<cr>

function! RightAlignSecondField()
    let line = getline('.')
    let tw = &textwidth == 0 ? 78 : &textwidth
    let fields = split(line, '\v {2,}')
    if len(fields) > 2
        throw 'Too many fields.'
    endif
    let pad_width = tw - len(fields[0]) - len(fields[1])
    cal setline('.', fields[0] . repeat(' ', pad_width) . fields[1])
endfunction

" Convert a path selected in visual mode to quoted list items.
" eg: /a/b/c -> 'a', 'b', 'c'
function! PathToQuoted()
    let line = getline('.')
    let start = col("'<")
    let len = col("'>") - start + 1
    let path = strpart(line, start - 1, len)
    let quoted = "'" . join(split(path, '/'), "', '"). "'"
    cal setline('.', strpart(line, 0, start - 1) . quoted . strpart(line, start + len - 1))
endfunction
nn <leader>mq :call PathToQuoted()<cr>

function! SnakeToCamel()
    s/\v_([a-z])/\u\1/g
endfunction

function! ArgsOnSeparateLines()
    let base_indent = matchstr(getline('.'), '\v^[ \t]*')
    let indent = base_indent . repeat(' ', shiftwidth())
    silent s/\v, /\=",\n" . indent/g
endfunction

" Join lines, trimming whitespace from all but the first.
function! JoinNoWhitespace() range
    let pos = getpos('.')
    let lastline = a:lastline
    if a:firstline == lastline
        let lastline += 1
    endif
    let lines = getline(a:firstline, lastline)
    for i in range(1, len(lines) - 1)
        let lines[i] = util#trim(lines[i])
    endfor
    cal setline(a:firstline, join(lines, ''))
    exe printf("%d,%dd", a:firstline + 1, lastline)
    call setpos('.', pos)
endfunction
command! -range JoinNoWhitespace <line1>,<line2>call JoinNoWhitespace()
nn <leader>J :JoinNoWhitespace<cr>
vn <leader>J :JoinNoWhitespace<cr>

" Extract strings from a buffer using a regex.
"
" Match a regex against a range of lines, convert each list of submatches to a
" string using the given FuncRef, and set the unnamed register to the
" resulting strings, with each on its own line.
"
" Extract(re, [func])
"
" re
"   regular expression with capture groups. Use a single-quoted string to
"   avoid doubling backslashes
" func
"   A FuncRef, or more likely a lambda expression, to combine submatches into
"   strings to be added to the returned list. The list of submatches is given
"   as the first argument. By default the entire match is returned.
"
" For example, with these lines:
"
"   foo(a, b)
"   foo(c, d)
"
" calling this:
"
"   %cal Extract('\vfoo\((\w+), (\w+)', {m -> m[1] . m[2])})
"
" results in @" being set to:
"
"   a b
"   c d
"
" Use varargs instead of a default argument for the func parameter to be
" compatible with Vim 8.0, which has lambdas but not default args.
if has('lambda')
    function! Extract(re, ...) range
        if a:0 == 0
            let Func = {m -> m[0]}
        elseif a:0 == 1
            let Func = a:1
        else
            throw "Extract expects only one extra arg"
        endif
        let l = []
        let lines = getline(a:firstline, a:lastline)
        " Going linewise in vimscript is probably pretty slow, but if we
        " combine the lines into a single string then line breaks are kind of
        " ignored (see `:h string-match`). Using the :substitute command
        " instead might be faster but it'd be awkward to get a list of
        " submatches then.
        for line in lines
            cal substitute(line, a:re, {m -> [add(l, Func(m)), m[0]][1]}, 'g')
        endfor
        cal setreg('"', join(l, "\n"), 'l')
    endfunction
endif

" Assign-and-increase function intended to be used when making substitutions
" using the expression register. For example, to replace 'X's with
" 1, 2, 3, ...: let i=1 | s/X/\=Inc(1)/g
let g:i = 1
function! Inc(step)
    let g:i += a:step
    return g:i - a:step
endfunction

" A weak fuzzy file finder for use in environments where installing vim
" plugins or other executables isn't possible or worth it.
"
" If a single file under the current directory contains the given substrings
" in order, edit that file in the current window. Otherwise print the files
" that matched.
"
" Surprisingly, this feels like 70% of what I need from a fuzzy file finder.
"
" eg:
"   :E parts of a file path
function! EditFileLikeSubstrings(...)
    let pattern = ''
    for arg in a:000
        let pattern .= '*' . arg
    endfor
    let pattern .= '*'
    let cmd = "find . -name .git -prune -o -type f -not -name '*.sw[opq]' -ipath %s -print"
    let files = systemlist(printf(cmd, shellescape(pattern)))
    if len(files) == 1
        exe 'e ' . files[0]
    elseif len(files) == 0
        echo 'No files matched.'
    else
        echo 'Multiple files matched:'
        for f in files
            echo f
        endfor
    endif
endfunction
command! -nargs=+ E cal EditFileLikeSubstrings(<f-args>)

" Switch between C header and implementation files.
function! HOrC(filepath)
    if a:filepath =~ '\.c$'
        exe 'e ' . substitute(a:filepath, '\.c$', '.h', '')
    else
        exe 'e ' . substitute(a:filepath, '\.h$', '.c', '')
    endif
endfunction
nn <leader>o :call HOrC(expand('%'))<cr>

" Open a file and search for a regex.
"
" Expects a "link" formatted like {<filename>:<regex>} to be under the cursor.
function! GoAndSearch()
    let saved_unnamed_reg = @"
    normal yi{
    let m = matchlist(@", '\v([^:]+):(.*)')
    if len(m) == 0
        echohl ErrorMsg | echo 'unexpected link format' | echohl None
        return
    endif
    let filename = m[1]
    let regex = m[2]
    exe 'new ' . filename
    cal search(regex)
    let @" = saved_unnamed_reg
endfunction
nn <leader>mg :call GoAndSearch()<cr>

" Evaluate arguments as globs and set the unnamed register to the resulting
" newline-separated list of filenames.
"
" Intended for easily finding files and accurately copying their paths into a
" document, instead of going to a shell and using the OS's copy-paste
" functionality. Another crude but effective way to do this (without globbing)
" while still using filename completion is to read in the results of `echo`,
" like `:r !echo ~/.bash<TAB>`.
com! -nargs=* -complete=file YankFilepaths let @" = join(GlobEach([<f-args>]), "\n")
function! GlobEach(patterns)
    let files = []
    for pattern in a:patterns
        for file in glob(pattern, 0, 1)
            let f = substitute(file, '^\V' . escape(expand("$HOME"), '\'), '\~', "")
            cal add(files, f)
        endfor
    endfor
    return files
endfunction

" Plugin configuration
" ====================
" fzf
set rtp+=/usr/share/doc/fzf/examples,~/.fzf
" Change the split binding to be more mnemonic and match probe.
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }
nn <leader>z :FZF --exact<cr>

let g:NERDTreeDirArrows=0

" Probe
let g:probe_ignore_files = ['\~$', '/_\?build$', '\.pyc$', 'freetds-.*', '\.class$', '/target$', '\.sw[pon]$', '\.\(o\|so\)$', '\(^\|/\)\.']
command! ProbeFindTc :cal probe#open(
    \ function('probe#tc#scan'),
    \ function('probe#tc#open'),
    \ function('probe#tc#refresh'))
nn <leader>d :ProbeFindFile<cr>
nn <leader>f :ProbeFindInRepo<cr>

nn <leader>t :TagbarOpenAutoClose<cr>
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }

let g:tagbar_type_markdown = {
    \ 'ctagstype': 'markdown',
    \ 'ctagsbin' : '~/.local/bin/markdown2ctags',
    \ 'ctagsargs' : '-f - --sort=yes',
    \ 'kinds' : [
        \ 's:sections',
        \ 'i:images'
    \ ],
    \ 'sro' : '|',
    \ 'kind2scope' : {
        \ 's' : 'section',
    \ },
    \ 'sort': 0,
\ }

" Quickfix
" ========
function! Make(makeprg)
    call MakeX(a:makeprg, v:none, 0)
endfunction
function! MakeX(makeprg, errorformat, jump)
    let jump = a:jump == 0 ? '!' : ''
    let errorformat_orig = &l:errorformat
    if a:errorformat != v:none
        let &l:errorformat = a:errorformat
    endif
    let makeprg_orig = &l:makeprg
    let &l:makeprg = a:makeprg
    try
        exe printf('make%s', jump)
    finally
        let &l:errorformat = errorformat_orig
        let &l:makeprg = makeprg_orig
    endtry
endfunction
" "Make" the current file with the given "compiler".
com! -nargs=* Mf :call Make(<q-args> . ' %')
com! -nargs=* Make :call Make(<q-args>)
nn <leader>mm :call Make(&makeprg)<cr>

com! MakeTest call Make('make test')
nn <leader>mu :MakeTest<cr>

com! -nargs=* -complete=file Pyflakes call Make('pyflakes ' . (<q-args> == '' ? '%' : <q-args>))

" Fill the quickfix list with pylint output. Run pylint on all the files
" changed since the last commmit (default) or between given revisions, which
" are passed straight to git diff.
function! PylintGit(...)
    let command = "git diff --name-only " . join(a:000)
    let pathsFromRepoRoot = split(system(command), "\n")
    let prefixLength = strlen(util#trim(system("git rev-parse --show-prefix")))
    let paths = []
    for path in pathsFromRepoRoot
        call add(paths, strpart(path, prefixLength))
    endfor
    let makeprg_orig = &l:makeprg
    let &l:makeprg = "pylint -f parseable -i y -r n " . join(paths, ' ')
    let efm_orig = &l:efm
    let &l:efm = "%f:%l: %m"
    try
        make!
    finally
        let &l:makeprg = makeprg_orig
        let &l:efm = efm_orig
    endtry
endfunction
command! -nargs=* Pg call PylintGit('<args>')

" Set the quickfix list to chunks of changes as shown by git diff.
" Passes its arguments straight to git diff, so by default it diffs the working
" directory with HEAD.
" Sets the first non-empty changed line as the description, if possible.
" Possibly superceded by git-jump.
function! QuickfixGitDiff(...)
    let command = "git diff -U0 " . join(a:000)
    let lines = split(system(command), '\n')
    " Relative paths would be nice but absolute paths are far easier.
    let repoRoot = util#trim(system("git rev-parse --show-toplevel"))
    let file = ''
    let locList = []
    let i = 0
    while i < len(lines)
        let line = lines[i]
        if match(line, '^diff') != -1
            let file = repoRoot .  '/' . matchlist(line, '\v b/(.*)$')[1]
        elseif match(line, '^@@') != -1
            let lineNum = matchlist(line, '\v.* \+(\d*)')[1]
            let descIndex = i + 1
            while len(lines[descIndex]) == 1 && descIndex < len(lines) - 1
                let descIndex += 1
            endwhile
            if match(lines[descIndex], '^diff\|^@@') != -1
                let descIndex = i + 1
            endif
            cal add(locList, {'filename': file, 'lnum': lineNum, 'text': lines[descIndex]})
        endif
        let i += 1
    endwhile
    call setqflist(locList)
endfunction
command! -nargs=* Gdqf call QuickfixGitDiff('<args>')

function! ReadGitDiff()
    0r !git diff
    set filetype=diff
endfunction
command! Gdr call ReadGitDiff()

function! QuickfixConflicts()
    let files = util#trim(system("git status -s | grep '^\\(UU\\|AA\\)' | awk '{print $2}' | tr '\n' ' '"))
    silent! exe printf(":grep '[<]<<<<<<' %s", files)
    redraw!
endfunction
com! -nargs=0 Conflicts call QuickfixConflicts()

" Operator-pending evalutators
" ============================
let g:PipeEvalInterpreter = 'bc'
function! PipeEval(input)
    let result = system(g:PipeEvalInterpreter, a:input . "\n")
    return substitute(result, '\v\n*$', '', 'g')  " Remove trailing newlines.
endfunction
function! PipeEvalOp(type)
    " Yank the text into the unnamed register, @@.
    if a:type ==# 'v' || a:type ==# 'V'
        normal! `<v`>y
    elseif a:type ==# 'char' || a:type ==# 'line'
        normal! `[v`]y
    else
        return
    endif

    " If the input is linewase, paste the output below; otherwise paste the
    " output inline.
    let is_linewise = a:type ==# 'V' || a:type ==# 'line'
    let @@ = PipeEval(@@)
    if is_linewise
        let @@ = "\n==\n" . @@
    else
        let @@ = ' = ' . @@
    endif

    " Paste the eval'd result.
    if a:type ==# 'v' || a:type ==# 'V'
        normal! `>p
    elseif a:type ==# 'char' || a:type == 'line'
        normal! `]p
    endif
endfunction
" math eval
nnoremap <leader>em :let g:PipeEvalInterpreter = 'bc'<cr>:set operatorfunc=PipeEvalOp<cr>g@
nnoremap <leader>eM :let g:PipeEvalInterpreter = 'bc'<cr>V:<c-u>call PipeEvalOp(visualmode())<cr>
vnoremap <leader>em :<c-u>let g:PipeEvalInterpreter = 'bc'<cr>:call PipeEvalOp(visualmode())<cr>
" bash eval
nnoremap <leader>eb :let g:PipeEvalInterpreter = 'bash -s'<cr>:set operatorfunc=PipeEvalOp<cr>g@
nnoremap <leader>eB :let g:PipeEvalInterpreter = 'bash -s'<cr>V:<c-u>call PipeEvalOp(visualmode())<cr>
vnoremap <leader>eb :<c-u>let g:PipeEvalInterpreter = 'bash -s'<cr>:call PipeEvalOp(visualmode())<cr>
" python eval
nnoremap <leader>ep :let g:PipeEvalInterpreter = 'python3'<cr>:set operatorfunc=PipeEvalOp<cr>g@
nnoremap <leader>eP :let g:PipeEvalInterpreter = 'python3'<cr>V:<c-u>call PipeEvalOp(visualmode())<cr>
vnoremap <leader>ep :<c-u>let g:PipeEvalInterpreter = 'python3'<cr>:call PipeEvalOp(visualmode())<cr>

function! VimEvalOp(type)
    " Yank the text into the unnamed register, @@.
    if a:type ==# 'v' || a:type ==# 'V'
        normal! `<v`>y
    elseif a:type ==# 'char' || a:type ==# 'line'
        normal! `[v`]y
    else
        return
    endif

    let @@ = substitute(@@, '\v(^[ \t\n]+|[ \t\n]+$)', '', 'g')
    let result = eval(@@)
    if type(result) != v:t_string
        let @@ = string(result)
    else
        let @@ = result
    endif

    " If the input is linewase, paste the output below; otherwise paste the
    " output inline.
    let is_linewise = a:type ==# 'V' || a:type ==# 'line'
    if is_linewise
        let @@ = "\n==\n" . @@
    else
        let @@ = ' = ' . @@
    endif

    " Paste the eval'd result.
    if a:type ==# 'v' || a:type ==# 'V'
        normal! `>p
    elseif a:type ==# 'char' || a:type == 'line'
        normal! `]p
    endif
endfunction
" vim eval
nnoremap <leader>ev :set operatorfunc=VimEvalOp<cr>g@
nnoremap <leader>eV V:<c-u>call VimEvalOp(visualmode())<cr>
vnoremap <leader>ev :call VimEvalOp(visualmode())<cr>

" One-way operator-pending commands
" =================================
let g:PipeOpCmd = 'xsel -ib'
let g:PipeOpOut = ''
function! PipeOp(type)
    " Get the text.
    if a:type ==# 'v' || a:type ==# 'V'
        normal! `<v`>y
    elseif a:type ==# 'char' || a:type == 'line'
        normal! `[v`]y
    else
        return
    endif

    " Save the output so it can be retrieved via "= if needed.
    let g:PipeOpOut = system(g:PipeOpCmd, @@)
endfunction

" Copy/paste using xsel, for when clipboard support isn't available or the
" connection to X has been broken.
nnoremap <leader>c :let g:PipeOpCmd = 'xsel -ib'<cr>:set operatorfunc=PipeOp<cr>g@
nnoremap <leader>C :let g:PipeOpCmd = 'xsel -ib'<cr>V:<c-u>call PipeOp(visualmode())<cr>
" Copy to end of line, not including the newline.
nnoremap <leader>$ :let g:PipeOpCmd = 'xsel -ib'<cr>vg_:<c-u>call PipeOp(visualmode())<cr>
vnoremap <leader>c :<c-u>let g:PipeOpCmd = 'xsel -ib'<cr>:call PipeOp(visualmode())<cr>
nnoremap <leader>* :call append(line('.'), systemlist('xsel -op'))<cr>
nnoremap <leader>+ :call append(line('.'), systemlist('xsel -ob'))<cr>

" View images
"
" It seems more convenient to use <cfile> instead of expecting an operator for
" the common case. For filenames with spaces you'll need to visually select it
" first, unless it's on a line by itself, in which case the  `mV` binding is
" appropriate.
let g:ViewCmd = printf('sed "s^~^%s^" | feh --scale-down -f -', $HOME)  " Expand leading tildes.
nnoremap <leader>mv :echo system(g:ViewCmd . ' ' . expand('<cfile>'))<cr>
nnoremap <leader>mV :let g:PipeOpCmd = g:ViewCmd<cr>V:<c-u>call PipeOp(visualmode())<cr>:echo g:PipeOpOut<cr>
vnoremap <leader>mv :<c-u>let g:PipeOpCmd = g:ViewCmd<cr>:call PipeOp(visualmode())<cr>:echo g:PipeOpOut<cr>


" Make a new window and format a man page for it.
function! Man(man_args, win_mods)
    exe printf('%s new', a:win_mods)
    setlocal bufhidden=unload " unload buf when no longer displayed
    setlocal buftype=nofile   " buffer is not related to any file
    setlocal nowrap           " don't soft-wrap
    setlocal nobuflisted      " don't show up in the buffer list
    " pipe in the formatted manpage
    exe printf('silent 0r !MANWIDTH=%d man %s', winwidth(0), a:man_args)
    " set a descriptive name
    exe printf('silent file %s', fnameescape('man ' . a:man_args))
    0
endfunction
com! -nargs=+ Man call Man(<q-args>, <q-mods>)

" Display shell command output in a scratch window.
"
" If you have Vim9, consider using `:terminal <cmd>` instead, although that
" won't reuse the same window.
"
" win_mods control window splitting and placement and can be:
"     [vertical] [leftabove|rightbelow|topleft|botright]
function! PipeShellToScratch(buffer_name, cmd, win_mods) abort
    let saved_win = winnr()
    let windows = win_findbuf(bufnr(a:buffer_name))
    if len(windows) > 0
        " Move the cursor to the first window with our buffer name.
        exe win_id2win(windows[0]) . 'wincmd w'
        silent 0,$d  " Clear the window.
    else
        exe printf('%s new', a:win_mods)
        " Set the buffer name.
        exe printf('silent file %s', fnameescape(a:buffer_name))
        setlocal bufhidden=unload " unload buf when no longer displayed
        setlocal buftype=nofile   " buffer is not related to any file
        setlocal nowrap           " don't soft-wrap
        setlocal nobuflisted      " don't show up in the buffer list
    endif
    " pipe in the output from the shell command
    exe printf('silent 0r !%s', a:cmd)
    " Go back to the saved window
    exe saved_win . 'wincmd w'
endfunction
com! -nargs=+ PipeShellToScratch call PipeShellToScratch(<q-args>, <q-mods>)

" Filetypes
" =========

" The standard markdown plugin is lacking as of Vim7.4
" Improvements in tpope/vim-markdown will eventually be merged upstream.
function! MarkdownLevel()
    let h = matchstr(getline(v:lnum), '^#\+')
    if empty(h)
        return "="
    else
        return ">" . len(h)
    endif
endfunction
" md extension signifies markdown, not modula2
au! filetypedetect BufNewFile,BufRead *.md
au filetypedetect BufNewFile,BufRead *.md setlocal filetype=markdown

" gp extension is for gnuplot instead of the PARI/GP calculator.
au! filetypedetect BufNewFile,BufRead *.gp
au filetypedetect BufNewFile,BufRead *.gp setlocal filetype=gnuplot

" Group autocommands so they can be easily removed/refreshed.
augroup vimrc
    " Remove all vimrc autocommands.
    autocmd!

    " Indentation settings.
    autocmd Filetype java setlocal sts=2 sw=2 ts=2
    autocmd Filetype ruby setlocal sts=2 sw=2 ts=2
    autocmd Filetype lisp filetype indent on
    autocmd Filetype go setlocal noet
    autocmd Filetype c setlocal cindent indentexpr= noet
    autocmd Filetype cpp setlocal cindent indentexpr= noet
    autocmd Filetype python setlocal foldmethod=indent foldnestmax=2 foldlevel=99
    au Filetype make setlocal sts=4 sw=4 ts=4 noet

    " Rust
    " Note this block shouldn't be necessary or have any effect in Vim9+
    autocmd Filetype rust let &l:makeprg = 'cargo build'
    autocmd Filetype rust setlocal nosi  " smartindent was being enabled despite filtype indent:OFF

    " Abbreviations
    autocmd FileType java iabbrev <buffer> sop System.out.println
    autocmd FileType rust iabbrev <buffer> pl println!

    " Markdown
    au FileType markdown setlocal foldexpr=MarkdownLevel()
    au FileType markdown setlocal foldmethod=expr
    " Don't close folds when the filetype is detected.
    au FileType markdown setlocal foldlevel=10
    " Don't worry about underscores within words.
    au Filetype markdown syn clear markdownError
    " Don't hilight italics. I want literal asterisks all the time in my notes
    " and italics don't denote enough emphasis to deserve hilighting anyway.
    au Filetype markdown syn clear markdownItalicDelimiter markdownItalic

    " Powershell: make a new "advanced" function.
    au Filetype ps1 ino ;c {<cr>[CmdletBinding()]<cr>param()<cr>}<esc>ko

    " Key bindings to run filetype-specific unit tests and syntax checks
    autocmd Filetype sh nn <buffer> <leader>my :call Make('shellcheck -f gcc %')<cr>
    autocmd Filetype python nn <buffer> <leader>my :call Make('make mypy')<cr>
    " Rust
    autocmd Filetype rust nn <buffer> <leader>mc :call Make('cargo check --tests')<cr>
    autocmd Filetype rust nn <buffer> <leader>mu :call Make('cargo test')<cr>
    autocmd Filetype rust nn <buffer> <leader>mU :call Make('cargo test --bin ' . expand('%:t:r'))<cr>
    autocmd Filetype rust nn <buffer> <leader>my :call Make('cargo clippy')<cr>
    autocmd Filetype rust nn <buffer> <leader>mY :call Make('./lint')<cr>
    autocmd Filetype rust nn <buffer> <leader>mr :terminal cargo run<cr>
    autocmd Filetype rust nn <buffer> <leader>mR :exe 'terminal cargo run --bin ' . expand('%:t:r')<cr>
augroup END


" Tips
"
" Evaluate vimscript almost anywhere using the expression register: <c-r>=
"
" Globally replace the word under the cursor with something else:
" :nn <leader>r :exec printf('%%s#\<%s\>#self.%s#g', expand('<cword>'), expand('<cword>'))<cr>
"
" Use substitute and eval together:
" '<,'>s/{{\([^}]\+\)}}/\=eval(submatch(1))/g
"
" You can basically get tab-specific working directories using :lcd.

if filereadable(expand('~/.vimrc.local'))
    source ~/.vimrc.local
endif
noh

# Some important sqsh options:
#
# -b
#     hide banner
# -D database
#     set db
# -i filename
# -m horiz|vert|bcp|csv|html|meta|pretty|none
#     Change the display style. There's also the $style var and the -m flag to \go.
# -o outfile
# -p
#     Display performance statistics. \go has a -p option.
#
# -S server
# -U user
# -P password

# We can use DSQUERY to show the server name in the prompt because if DSQUERY
# wasn't used for supplying connection info to sqsh it gets populated with the
# argument to the -S option.
\set prompt='{0;32}${DSQUERY}.${database}|${histnum}.${lineno}> {0}'
\set banner=0
\set style=pretty
\set nosepline=1
\set statistics=1

# Set BCP separators to include the ASCII unit and record separators so
# embedded newlines can be handled. Keep a printable character in colsep so
# it's still easy to look at raw. Note that sqsh adds a newline after each row
# regardless of rowsep, which is fine.
\set bcp_colsep="|"
\set bcp_rowsep=""
\set bcp_header=1

\set date='%Y-%m-%d'
\set datefmt='%Y-%m-%d'
\set datetime='%Y-%m-%dT%H:%M:%S'

# Validation of the float format is messed up. The "scale" needs to be set to a
# value lower than the "precision" in a separate statement. See dsp_prop_set in
# the sqsh repo.
\set float=18.3

\set histmerge=1
\set histsize=100
\set histunique=1

\set repeat_batch=1

# The semicolon hack is convenient but stops scripts that contain semicolons
# from working. Sometimes a semicolon is required in the middle of a batch.
\set semicolon_hack=0

\set keyword_completion=exact
\set keyword_dynamic=1
# Just tab-complete on User tables and Views for now.
# For details about sysobjects see: https://docs.microsoft.com/en-us/sql/relational-databases/system-compatibility-views/sys-sysobjects-transact-sql
\set keyword_query="select name from sysobjects where xtype in ('U', 'V') order by name"

# Every CSV column sent to miller must have a column heading.
\alias gopsv="\go -m csv -p out | sql-mlr -- --ocsvlite --ofs pipe cat"
\alias gocsv="\go -m csv -p out | sql-mlr -- --ocsvlite cat"
\alias gomlr="\go -m csv -p out | sql-mlr"
\alias goadt="\go -m bcp -p out | mlr-adt -- --oxtab cat"

\alias po="\go -m csv -p out | sql-mlr -p -- --opprint cat"
\alias lo='\go !* | less -S'

# Get autojoin buffer.
\alias baj='\buf-copy !. aj'

# List table columns.
\func -x \d
    \shell : >/tmp/d
    \for table in $*
        \echo "" >>/tmp/d
        \echo "$table" >>/tmp/d
        SELECT c.name [column_name]
            ,t.name AS [type_name]
            ,c.max_length
            ,c.is_nullable [null]
        FROM sys.columns AS c
        JOIN sys.types AS t ON c.user_type_id=t.user_type_id
        WHERE c.object_id = OBJECT_ID(\\'$table\\')
        ORDER BY c.column_id
        \go -m csv | sql-mlr -- --opprint cat >>/tmp/d
    \done
    \shell less /tmp/d
\done

# Named after the psql command, but currently only displays the db names.
\func -x \l
    select name [database] from sys.databases
    \go -m csv -p none | sql-mlr -- --csv --headerless-csv-output cat
\done


# Quickly find an approximate row count of the given tables using index
# partition info.
\func -x \rows
    \if [ $# -lt 1 ]
        \echo "usage: rows <table>..."
        \return 1
    \fi
    \set saved_stats=$statistics
    \set statistics=0
    -- Use some awkward perl to avoid nesting the same types of quotes.
    \set arg_list="`perl -e 'print join(qq(, ), map {chr(39) . $_ . chr(39)} @ARGV)' $*`"

    select
        o.name "table",
        sum(st.row_count) "rows"
    from sys.dm_db_partition_stats st
        join sys.objects o on o.object_id = st.object_id
    where o.name in ($arg_list)
        and index_id < 2
    group by o.name
    order by o.name
    go | sed '/^$/d;/row affected/d'

    \set statistics=$saved_stats
\done

\func -x \freq
    \if [ $# -lt 2 ]
        \echo "usage: \freq <table> <col>..."
        \return 1
    \fi
    `sql-freq $*`
    \go
\done

\func -x \all
    \if [ $# -lt 1 ]
        \echo "usage: \all <table> [<go-opts>]"
        \return 1
    \fi
    select * from ${1}
    \go ${2} ${3} ${4} ${5} ${6} | less -S
\done

\func -x \head
    \if [ $# -lt 1 ]
        \echo "usage: \top <table> [<go-opts>]"
        \return 1
    \fi
    select top 10 * from ${1}
    \go ${2} ${3} ${4} ${5} ${6} | less -S
\done

\if [ -r ~/.sqshrc.local ]
    \loop -n -i ~/.sqshrc.local
\fi
